<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Darrell Tunnell's Blog]]></title>
  <link href="http://darrelltunnell.net/atom.xml" rel="self"/>
  <link href="http://darrelltunnell.net/"/>
  <updated>2016-03-19T21:56:46+00:00</updated>
  <id>http://darrelltunnell.net/</id>
  <author>
    <name><![CDATA[Darrell Tunnell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dnn Extensions - Sources Packages?]]></title>
    <link href="http://darrelltunnell.net/blog/2016/03/19/dnn-extensions-sources-packages-what-are-they/"/>
    <updated>2016-03-19T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2016/03/19/dnn-extensions-sources-packages-what-are-they</id>
    <content type="html"><![CDATA[<h2>Sources Packages</h2>

<p>I have been doing some work on DnnPackager recently, and I&rsquo;ve come accross the concept of &ldquo;Source&rdquo; packages. I have to admit I am not entirely new to these, but I&rsquo;ve never personally used them for my projects in the past.</p>

<p>Source packages are basically identical to the ordinary install zip&rsquo;s for your dnn module / extension, i.e you &ldquo;install&rdquo; them into your Dnn site like any other install package, except that they also include &ldquo;source code&rdquo; files within them, like .cs, .vb files etc.</p>

<h2>Why would you want to include source code in your install zip?</h2>

<p>Well this is where things get a little interesting.</p>

<!-- more -->


<p>The two main reasons I can fathom why you would want to include source code in an install zip are that:</p>

<ol>
<li>Your module uses dynamic compilation, and so unless you include source files with the module installation, then it just won&rsquo;t work.</li>
<li>You want to distribute your source code, so that developer&rsquo;s (who pay for it?) can open it up in VS and own it / make changes (improvements?). Usually you&rsquo;d charge for this option, but it&rsquo;s faesible you are just an extremely generous developer (like me) who gives stuff away for free.</li>
</ol>


<p>Number 1 is a necessity really to cater for modules that use dynamic compilation.</p>

<p>Number 2 is an optional thing about you as a developer (or commercial entity), distributing your solution source code in a format that thrid parties can &ldquo;own&rdquo; it - irrespective of whether you have used dynamic compilation or not.</p>

<p>Note: If you are using Dynamic compilation for your module, then people allready have the ability to make changes to the code by simply going into the website directory after the module has been installed, and modifying the code files. But you already knew that right!! Whether they are legally entitled to do so ofcourse, would be down to the licence agreement.</p>

<p>Number 1 and 3 are different.</p>

<h2>Why are they different?</h2>

<p>Because in the first scenario, you are giving IIS the files it needs to compile and run your code within a Dnn website instance. In the second scenario, you are giving <strong>developers</strong> the files they need, to open up your project / solution and <strong>build</strong>, and compile your code, in a manner that spits out everything needed by scenario 1. In other words, the build and compilation that developers do, produces the output that&rsquo;s needed within the website for the compilation that IIS does.</p>

<h2>Why was that last bit important</h2>

<p>Because files related to the build that developers do - i,e the ones that prodice the output that actually needs to be installed to the dnn site, arguable have no business being installed into a Dnn website. Key files, project files, solution files etc etc - there are all completely unrelated to the working / running of your module within Dnn, and have nothing to do with IIS dynamic compilation or anything. They shouldn&rsquo;t be installed in a website period (imho).</p>

<h2>Dual purpose</h2>

<p>There seems to be a dual purpose for the sources package that doesn&rsquo;t sit right with me.
Using it to install source code into the website to support dynamic compilation seems like what it is meant for imho - it is a Dnn installation zip after all.</p>

<p>Using it to provide a third party with your VS solution / project files so that they can open up the solution in an IDE, build and compile the code is a completely different scenario, and I can&rsquo;t see how that second scenario can work reliably just by including a .csproj in a dnn sources install zip - except for in the most simplisitic and basic of scenarios, which rarely happen in the real world.</p>

<h2>Example of some issues with including Sln / Csproj in a sources zip package.</h2>

<p>Currently, if you use widely available project templates to produce &ldquo;sources&rdquo; packages, they will by default, produce a sources &ldquo;zip&rdquo; file for each of the module projects in your solution, and this will contain source code files copied form your project, as well as the csproj, and sln file. (I think the sln will only get included if it lives within the project directory).</p>

<p>Already we hit an issue, as if you have multiple projects in your solution, and the sln file lives in a parent directory of those projects like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>solution/mysln.sln
</span><span class='line'>solution/projectA/projectA.csproj
</span><span class='line'>solution/projectB/projectB.csproj
</span></code></pre></td></tr></table></div></figure>


<p>(which is fairly normal) then the sln file usually won&rsquo;t be included in the sources packages for any of your particular modules as it doesn&rsquo;t live directly within a project directory.</p>

<p>Secondly, if ProjectA has a project reference to ProjectB, and someone downloads the sources package for your projectA module, and opens up the csproj file that you have included in that sources package - the project is going to have a missing project reference to projectB so it won&rsquo;t compile.</p>

<p>There are yet more problems. If your .csproj files reference assemblies from some lib directory within your checkout directory somewhere, as this lib directory won&rsquo;t be included in the sources package (because it doesn&rsquo;t live within the project dir), anyone opening the project file in VS will see missing assembly references, they will have to manually correct them - otherwise the solution won&rsquo;t compile.</p>

<p>If your project files include some custom build targets that live on your machine, or within your checkout directory somewhere, etc etc - you guessed it the person opening the .csproj file is going to have issues because they won&rsquo;t be included in the same location within the sources package.</p>

<h2>Alternatives?</h2>

<p>If you want to give away your VS solution (or sell the source) to a third party, there are better / easier ways to provide access to it without shoehorning it in to the dnn install zip imho!</p>

<p>The easiest may be to just zip up your entire solution (checkout directory), and allow that to be downloaded from some protected location. This does not have to be in a &ldquo;dnn&rdquo; install package format, just a simple zip file that the person recieving can extract and then open up the VS sln file. You want it to be like they just checked out the solution from source control and are now opening up the VS sln file - just like you do right?</p>

<p>If there are some pre-requisites to being able to open and build the solution, add a readme to the zip that explains what a developer must do before attempting to open the solution. This is usually handy to have in your source control anyway - in case you ever need to checkout and open the solution on a new machine one day that doesn&rsquo;t have your dependencies set up. These should be the same steps that any developer new to the company has to go through (including you) when checking out the code for the first time and wanting to open it.</p>

<h2>How does this all tie in with DnnPackager?</h2>

<p>Well, for the next realease of DnnPacakger, I have added rudimentary support for Sources packages (thanks to <a href="https://github.com/nvisionative">@nvisionative</a> for requesting this feature) - so that it will now produce &ldquo;sources&rdquo; packages alongside the standard install zip. However this is currently for the purposes of supporting modules that need to include source files in their installation process into Dnn, which I suspect will mainly just be ones that use dynamic compilation.</p>

<p>It won&rsquo;t include .csproj files or .sln files because at this point in time, I can&rsquo;t see how including them would lead to a reliable experience for the developer opening these up at the other end.</p>

<p>Disagree? Leave some comments below, I&rsquo;d love to be convinced - or to just hear your views!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 Projects - NuGet-NPM-Gulp-Bower-Jspm-Aurelia-Part2]]></title>
    <link href="http://darrelltunnell.net/blog/2016/01/24/aurelia-and-asp-net-5-mvc-part2/"/>
    <updated>2016-01-24T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2016/01/24/aurelia-and-asp-net-5-mvc-part2</id>
    <content type="html"><![CDATA[<p><strong>This post is part two of a series. For part one see <a href="http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc/">here</a></strong></p>

<h2>Part 2 - Replacing Bower with JSPM</h2>

<p>In <a href="http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc">part 1 of this series</a> we created a shiny new ASP.NET 5 project, and I introduced some fundamentals.</p>

<p>For reasons discussed in <a href="http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc">part 1</a>, let&rsquo;s now go ahead with our first task, which is to ditch Bower in favour of JSPM as our javascript package manager.</p>

<!-- more -->


<h3>Uninstall Bower</h3>

<p>You will notice that your ASP.NET 5 application has a number of bower packages included by default:</p>

<p><img src="http://darrelltunnell.net/assets/posts/bowerpackages.PNG" alt="bowerpackages.PNG" /></p>

<p>First, let&rsquo;s uninstall Bower. In your project is a <code>Bower.json</code> file. Delete it! (If you can&rsquo;t see it in Solution Explorer, you might need to &lsquo;show all files&rsquo;</p>

<p><img src="http://darrelltunnell.net/assets/posts/bowerjson.PNG" alt="bowerjson.PNG" /></p>

<p>When you install <code>Bower</code> packages, they are installed under the &ldquo;lib&rdquo; folder within your <code>wwwroot</code> directory. So, let&rsquo;s now delete this lib folder which will delete all of these packages.</p>

<p><img src="http://darrelltunnell.net/assets/posts/wwwrootlibfolder.PNG" alt="wwwrootlibfolder.PNG" /></p>

<p>After those changes, your project should look something like this:</p>

<p><img src="http://darrelltunnell.net/assets/posts/projectremovedbower.PNG" alt="projectremovedbower.PNG" /></p>

<p>With Bower gone and those javascript / css packages deleted, what happens if we run the application now? Let&rsquo;s run it and find out..</p>

<p><img src="http://darrelltunnell.net/assets/posts/runappbowerremoved.PNG" alt="runappbowerremoved.PNG" /></p>

<p>As you can see, there are now errors displayed in the browser, and our site looks awful. This makes sense - our application is referencing javascript and css files that used to live in the lib folder, and now they are no longer found because we deleted them.</p>

<p>To fix this situation we&rsquo;ll need to add these packages back to our application, using <code>JSPM</code>, and then fix up the way our application is <code>loading</code> these dependencies (javascript, css files) at runtime.</p>

<h3>Install JSPM</h3>

<p>JSPM can be installed as a local <code>NPM</code> package.</p>

<ol>
<li>Open <code>Package.json</code></li>
<li>Add <code>JSPM</code> and whatever the latest version is:</li>
</ol>


<p><img src="http://darrelltunnell.net/assets/posts/addjspmnodejspackage.PNG" alt="addjspmnodejspackage.PNG" /></p>

<ol>
<li>Save the file.</li>
</ol>


<p>The <code>NPM</code> package for <code>JSPM</code> should now be downloaded and installed into your project. You will see that the package is installed into the &ldquo;node_modules&rdquo; folder within your project.</p>

<p><img src="http://darrelltunnell.net/assets/posts/nodemodulesfolderjspm.PNG" alt="nodemodulesfolderjspm.PNG" /></p>

<h3>Configure JSPM</h3>

<p>Now that the <code>JSPM</code> package has been installed, we need to configure <code>JSPM</code>.
The way to do this, is a little bit fiddely, as you have to drop to the command line - there is no fancy support for <code>JSPM</code> in Visual Studio at the moment like there is for <code>Bower</code>.</p>

<ol>
<li>Open a <code>command prompt</code> window, and <code>CD</code> to your project directory</li>
<li>Type <code>jspm init</code> and hit enter.</li>
</ol>


<p><img src="http://darrelltunnell.net/assets/posts/commandlinejspminit.PNG" alt="commandlinejspminit.PNG" /></p>

<p>You will now be asked a series of questions. At the end of answering these questions, the relevent <code>config</code> will be produced within the project.</p>

<p>Here are the answers. Some of them you can just hit enter without typing anything, and the default value will be used.</p>

<p><img src="http://darrelltunnell.net/assets/posts/jspminit.PNG" alt="jspminit.PNG" /></p>

<p>I&rsquo;ll quickly run through each option briefly.. But you should defer to the <code>JSPM</code> documentation site for further clarifications.</p>

<ol>
<li><p>&ldquo;<strong>Would you like jspm to prefix the jspm package.json properties under jspm?</strong>&rdquo;
We answer yes to this (the default) and this just means that JSPM will store its project configuration within a &ldquo;jspm&rdquo; section in our existing <code>package.json</code> file.</p></li>
<li><p>&ldquo;<strong>Enter server baseURL (public folder path)</strong>&rdquo;
The word URL is a bit confusing here. This is the relative path to your &ldquo;public&rdquo; folder within the project. By public folder, we mean the folder that will serve up static files and is therefore accessible to a browser. We need to set this to the path to our <code>wwwroot</code> directory. So the value we set for this question is <code>./wwwroot</code> as the value is relative to the current (project) directory.</p></li>
<li><p>&ldquo;<strong>Enter jspm packages folder [wwwroot\jspm_packages]</strong>&rdquo;
We accept the default value for this question. Previously, our Bower packages were installed under <code>wwwroot\lib</code> folder, so if you want to keep this consistent you could change this value to <code>wwwroot\lib</code>. I however am happy to keep the default.</p></li>
<li><p>&ldquo;<strong>Enter config file path [wwwroot\config.js]</strong>&rdquo;
This is the path to where you would like the config javascript file to be placed. Remember, <code>JSPM</code> is not just a package manager in a the sense of allowing you to adopt packages at <code>design time</code>. It also has features that are used your application when it runs. This means it has a <code>config</code> file (a javascript file) that your application will actually need to reference at runtime. This config file must therefore be placed in a directory that can be served up. We accept the default value (wwwroot\config.js)</p></li>
<li><p>&ldquo;<strong>Configuration file wwwroot\config.js doesn&rsquo;t exist, create it? [yes]</strong>&rdquo;
We accept the default which is <code>yes</code> as we want it to create this config file for us.</p></li>
<li><p>&ldquo;<strong>Enter client baseURL (public folder URL) [/]</strong>&rdquo;
This is the URL or path that the browser uses to browse to the public folder (wwwroot). We accept the default value, because our public folder (wwwroot) is served up as the root path (&ldquo;/&rdquo;).</p></li>
<li><p>&ldquo;<strong>Do you wish to use a transpiler? [yes]</strong>&rdquo;
We accept the default answer of &ldquo;yes&rdquo; because transpilers are awesome. They allow us to write javascript using the latest language specifications, and then they &ldquo;transpile&rdquo; that javascript so that it can run in browsers that don&rsquo;t support the latest language specifications yet.</p></li>
<li><p>&ldquo;<strong>Which ES6 transpiler would you like to use, Babel, Typescript, or Traceur? [babel]</strong>&rdquo;
For the purposes of this blog, I am accepting the default of &ldquo;Babel&rdquo;.</p></li>
</ol>


<p>The transpiler will just allow us to write javascript using ES6 language features, and this will be transpiled to run in browsers that don&rsquo;t support ES6 yet.</p>

<h3>Installing JSPM Packages</h3>

<p>Now that we have <code>JSPM</code> configured, it&rsquo;s time to install those packages that we previously had installed via <code>Bower</code>.</p>

<p>Back in the <code>command prompt</code> run the following commands:</p>

<ol>
<li><code>jspm install jquery</code></li>
<li><code>jspm install jquery-validation</code></li>
<li><code>jspm install github:aspnet/jquery-validation-unobtrusive</code></li>
<li><code>jspm install bootstrap</code></li>
</ol>


<p>Once that is done, those packages will now be installed under your <code>wwwroot\jspm_packages</code> folder:</p>

<p><img src="http://darrelltunnell.net/assets/posts/jspmpackages.PNG" alt="jspmpackages.PNG" /></p>

<p>The next step is to fix up our MVC application so that it loads our javascript and css using the <code>module loader</code>.</p>

<h3>Transitioning to Modules.</h3>

<p>The changes we have been making up until now, have been about managing our packages in our project at design time. This next step is about making changes to our application so that rather than including javascript and css files directly into particular pages, we instead, write &ldquo;modular&rdquo; javascript, that declares any dependencies it has, and then allow a <code>module loader</code> (<code>SystemJS</code>) to satisfy those dependencies for us at runtime by loading any needed javascript / css dependencies that our module requires.</p>

<p>If this sounds overwhelming, don&rsquo;t worry, it&rsquo;s simple once you get your head around the basic concept. Hopefully things will become more clear as we continue.</p>

<p>First, we need to include the module loader itself, and it&rsquo;s configuration file, into our application.</p>

<p>If you open <code>_Layout.cshtml</code> you will see a section like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;environment</span> <span class="na">names=</span><span class="s">&quot;Development&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;~/lib/jquery/dist/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;~/lib/bootstrap/dist/js/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;~/js/site.js&quot;</span> <span class="na">asp-append-version=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/environment&gt;</span>
</span><span class='line'>        <span class="nt">&lt;environment</span> <span class="na">names=</span><span class="s">&quot;Staging,Production&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;https://ajax.aspnetcdn.com/ajax/jquery/jquery-2.1.4.min.js&quot;</span>
</span><span class='line'>                    <span class="na">asp-fallback-src=</span><span class="s">&quot;~/lib/jquery/dist/jquery.min.js&quot;</span>
</span><span class='line'>                    <span class="na">asp-fallback-test=</span><span class="s">&quot;window.jQuery&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.5/bootstrap.min.js&quot;</span>
</span><span class='line'>                    <span class="na">asp-fallback-src=</span><span class="s">&quot;~/lib/bootstrap/dist/js/bootstrap.min.js&quot;</span>
</span><span class='line'>                    <span class="na">asp-fallback-test=</span><span class="s">&quot;window.jQuery &amp;&amp; window.jQuery.fn &amp;&amp; window.jQuery.fn.modal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>            <span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;~/js/site.min.js&quot;</span> <span class="na">asp-append-version=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/environment&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s comment out that whole section and replace it with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;~/jspm_packages/system.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;~/config.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>System.import(&quot;js/site&quot;);<span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, let&rsquo;s run the application!</p>

<p>You should now be able to see that we no longer get any errors about failing to load  javascript files <code>jquery.js</code> and <code>bootstrap.js</code>. In fact, <strong>those javascript files are not being loaded anymore.</strong></p>

<p><img src="http://darrelltunnell.net/assets/posts/jspmmissingcss.PNG" alt="jspmmissingcss.PNG" /></p>

<h4>Why aren&rsquo;t we loading JQuery and Bootstrap anymore?</h4>

<p>We are no longer directly including the <code>bootstrap</code> and <code>jquery</code> scripts into our <code>_Layout.cshtml</code> file, so they aren&rsquo;t being loaded! So we aren&rsquo;t seeing any 404&rsquo;s anymore within the browser console window - which is good, but don&rsquo;t we need those files for our site to function?</p>

<p>This is the nature of <code>modular</code> javascript. What we are in the process of transitioning to now, is a Modular concept, where <code>bootstrap</code> and <code>jquery</code> are modules that will only be loaded, if some other module that we are loading via the module loader, requires them as dependencies.</p>

<p>With that in mind, let&rsquo;s look at the module we are currently loading via the module loader. It&rsquo;s one called <code>js/site</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;script&gt;</span>System.import(&quot;js/site&quot;);<span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This resolves (thanks to the <code>config.js</code> file) to the <code>js/site.js</code> file in our <code>wwwroot</code> directory. This file is currently empty, meaning it also has no dependencies declared in it for any other modules. This is why the module loader no longer bothers to load <code>JQuery</code> or <code>Bootstrap</code> anymore.</p>

<p>This is good, because we are not including any javascript or css by default anymore, until its actually required by something (with the exception of the module loader, and config.js file iteself).</p>

<p>Therefore, as our <code>js/site</code> module is being loaded in our <code>_Layout.cshtml</code> file - which means it&rsquo;s going to be loaded on <strong>every page</strong>, we can &ldquo;force&rdquo; JQuery and Bootstrap to be loaded on every page, by decalring them as depencies for our module. This could be viewed as a bit of a cheat as really we don&rsquo;t want to load dependencies just for the sake of it, we only want to load them if they are actually used.</p>

<p>So, let&rsquo;s now assume that we are willing to load <code>JQuery</code>, and <code>Bootstrap</code> as a dependency for every page:</p>

<ol>
<li>Open <code>site.js</code> and insert the following code, then save it an re-run the application:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">$</span> <span class="nx">from</span> <span class="s1">&#39;jquery&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">bootstrap</span> <span class="nx">from</span> <span class="s1">&#39;bootstrap&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <code>ES6</code> syntax for declaring a module dependency.</p>

<p>You should now see that <code>JQuery</code> and <code>Bootstrap</code> are loaded on every page:</p>

<p><img src="http://darrelltunnell.net/assets/posts/jspmjqueryandbootstrapdependency.PNG" alt="jspmjqueryandbootstrapdependency.PNG" /></p>

<h3>What about CSS</h3>

<p>Now that we have got our javascript files loading again, we are still left with 404&rsquo;s for the bootstrap.css file.</p>

<p>Well we can use JSPM for CSS too, but we need to install the <code>CSS</code> plugin.</p>

<h4>Installing the CSS plugin for JSPM</h4>

<p>Back in the <code>command prompt</code> in your project directory, run the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jspm</span> <span class="nx">install</span> <span class="nx">css</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now go back to your <code>site.js</code> file, and add an import for the bootstrap.css. It should now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">$</span> <span class="nx">from</span> <span class="s1">&#39;jquery&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">bootstrap</span> <span class="nx">from</span> <span class="s1">&#39;bootstrap&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="s1">&#39;bootstrap/css/bootstrap.css!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, in <code>_Layout.cshtml</code>, comment out the link to the old - non existent, bootstrap.css file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;environment</span> <span class="na">names=</span><span class="s">&quot;Development&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        @*<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;~/lib/bootstrap/dist/css/bootstrap.css&quot;</span> <span class="nt">/&gt;</span>*@
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;~/css/site.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/environment&gt;</span>
</span><span class='line'>    <span class="nt">&lt;environment</span> <span class="na">names=</span><span class="s">&quot;Staging,Production&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        @*<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.5/css/bootstrap.min.css&quot;</span>
</span><span class='line'>            <span class="na">asp-fallback-href=</span><span class="s">&quot;~/lib/bootstrap/dist/css/bootstrap.min.css&quot;</span><span class="err">*@</span>
</span><span class='line'>        <span class="na">asp-fallback-test-class=</span><span class="s">&quot;sr-only&quot;</span> <span class="na">asp-fallback-test-property=</span><span class="s">&quot;position&quot;</span> <span class="na">asp-fallback-test-value=</span><span class="s">&quot;absolute&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;~/css/site.min.css&quot;</span> <span class="na">asp-append-version=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/environment&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run your application!</p>

<p><img src="http://darrelltunnell.net/assets/posts/jspmnoerrors.PNG" alt="jspmnoerrors.PNG" /></p>

<p>Wahoo! We now have no errors in the console window, our javascript and css is being loaded - and our application looks ok again.</p>

<h4>Flash of unstyled content</h4>

<p>You may notice that using the CSS plugin, your page is displayed in an unstyled form for a brief moment, whilst the CSS file is loaded asynchronosuly. This is known as a <a href="http://www.techrepublic.com/blog/web-designer/how-to-prevent-flash-of-unstyled-content-on-your-websites/">Flash of Unstyled Content</a> and is a problem with using the CSS plugin at present - <a href="https://github.com/systemjs/plugin-css/issues/57">see here</a>. Hopefully this will be addressed in the future, but in the meantime, feel free not to use the CSS Plugin if this is an issue, you can instead just directly reference the <code>Bootstrap.css</code> file in the <code>_Layout.cshtml</code> file as before, but from its new location under the <code>jspm_packages</code> directory.</p>

<h3>Finishing Touches - <code>_ValidationScripsPartial.cshtml</code></h3>

<p>Our application is running again, but you may notice a few of the pages have errors.</p>

<p>If you click on &ldquo;Register&rdquo; link for example you will see these errors in the browser console window:</p>

<p><img src="http://darrelltunnell.net/assets/posts/jspmregisterpageproblems.PNG" alt="jspmregisterpageproblems.PNG" /></p>

<p>This is because many of the views within our MVC application are rendering a partial called <code>_ValidationScriptsPartial.cshtml</code></p>

<p>For example, if you look at the bottom of <code>Register.cshtml</code>, you will see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">@section</span> <span class="n">Scripts</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="p">{</span> <span class="k">await</span> <span class="n">Html</span><span class="p">.</span><span class="n">RenderPartialAsync</span><span class="p">(</span><span class="s">&quot;_ValidationScriptsPartial&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at the contents of <code>_ValidationScriptsPartial</code> we can see that it is actually including additional scripts onto the page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;</span><span class="n">environment</span> <span class="n">names</span><span class="p">=</span><span class="s">&quot;Development&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="p">=</span><span class="s">&quot;~/lib/jquery-validation/dist/jquery.validate.js&quot;</span><span class="p">&gt;&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="p">=</span><span class="s">&quot;~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js&quot;</span><span class="p">&gt;&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">environment</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;</span><span class="n">environment</span> <span class="n">names</span><span class="p">=</span><span class="s">&quot;Staging,Production&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="p">=</span><span class="s">&quot;https://ajax.aspnetcdn.com/ajax/jquery.validate/1.14.0/jquery.validate.min.js&quot;</span>
</span><span class='line'>            <span class="n">asp</span><span class="p">-</span><span class="n">fallback</span><span class="p">-</span><span class="n">src</span><span class="p">=</span><span class="s">&quot;~/lib/jquery-validation/dist/jquery.validate.min.js&quot;</span>
</span><span class='line'>            <span class="n">asp</span><span class="p">-</span><span class="n">fallback</span><span class="p">-</span><span class="n">test</span><span class="p">=</span><span class="s">&quot;window.jQuery &amp;&amp; window.jQuery.validator&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="p">=</span><span class="s">&quot;https://ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js&quot;</span>
</span><span class='line'>            <span class="n">asp</span><span class="p">-</span><span class="n">fallback</span><span class="p">-</span><span class="n">src</span><span class="p">=</span><span class="s">&quot;~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js&quot;</span>
</span><span class='line'>            <span class="n">asp</span><span class="p">-</span><span class="n">fallback</span><span class="p">-</span><span class="n">test</span><span class="p">=</span><span class="s">&quot;window.jQuery &amp;&amp; window.jQuery.validator &amp;&amp; window.jQuery.validator.unobtrusive&quot;</span><span class="p">&gt;</span>
</span><span class='line'>    <span class="p">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">environment</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, depending upon the environment that ASP.NET determines your application is running on, this renders some script includes to particular js files, used for forms validation. These were previoulsy located within <code>Bower</code> packages, that we have deleted.</p>

<p>To correct this, we&rsquo;ll just need to instruct the module loader to load the <code>jquery.validate.unobtrusive</code> module instead. Notice that you don&rsquo;t need to also instruct the module loader to load the <code>jquery.validate</code> module, because <code>jquery.validate</code> is a dependency of <code>jquery.validate.unobtrusive</code> so the module loader will resolve it automatically.</p>

<p>So change the contents of <code>_ValidationScriptsPartial.cshtml</code> to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;</span><span class="n">script</span><span class="p">&gt;</span><span class="n">System</span><span class="p">.</span><span class="n">import</span><span class="p">(</span><span class="s">&quot;aspnet/jquery-validation-unobtrusive&quot;</span><span class="p">);&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now - everything is working!</p>

<p><img src="http://darrelltunnell.net/assets/posts/jspmallworking.PNG" alt="jspmallworking.PNG" /></p>

<h2>Recap</h2>

<p>In this blog post, we took an out of the box ASP.NET 5 MVC application that we created in <a href="http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc/">part 1</a>, and replaced <code>Bower</code> with <code>JSPM</code>. We changed the way our application resolves it&rsquo;s javascript and css files, to use a <code>module loader</code> instead.</p>

<p>We also saw that using the module loader to load CSS currently results in a &ldquo;flash of unstyled content&rdquo; issue, and so if that&rsquo;s an issue for your application then it&rsquo;s probably best to stick to directly linking to your css files as before, for the time being. That&rsquo;s a decision for you to make!</p>

<p>In the next blog post/s in this series, I will attempt to cover:</p>

<ol>
<li>Creating a basic Aurelia application on the Home page.</li>
<li>Introducing Linting, Bundling, and Minification into the build process, using Gulp.</li>
<li>Implementing &ldquo;Automatic Browser Refresh&rdquo; so our page refreshes as we make changes to javascript and css files.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagining a DotNetNuke Project Type for Visual Studio]]></title>
    <link href="http://darrelltunnell.net/blog/2016/01/17/imagining-a-dotnetnuke-project-type-for-visual-studio/"/>
    <updated>2016-01-17T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2016/01/17/imagining-a-dotnetnuke-project-type-for-visual-studio</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>When developing DotNetNuke extensions, we typically use one of the existing Visual Studio Project Type&rsquo;s, for example - an ASP.NET Web Application project.</p>

<p>Even when using a Project Template such as Christoc&rsquo;s, the project template is still based upon one of the standard Visual Studio project types - usually an ASP.NET Web Application project.</p>

<p>However these Project Types do not &ldquo;gel&rdquo; well with DotNetNuke development in a number of areas, the main ones being:</p>

<ol>
<li>Running the project in VS (clicking play) - wants to run the extensions as a Web Application, but this makes no sense for a Dnn extension - which has to be hosted by the DotNetNuke website.</li>
<li>Deploying the extension - there is no support for that in the project system - you have to manually deploy your extensions to the Dnn instance.</li>
<li>Debugging the extension - you have to manually attach to process.</li>
</ol>


<p>So.. what if there was a new Project Type, one that was purpose built for DotNetNuke development? What would that look like?</p>

<!-- more -->


<h2>Introducing the &ldquo;DotNetNuke&rdquo; Project Type</h2>

<p>I am currently developing a new VS Project Type explicitly for DotNetNuke development. The rest of this blog post will describe my vision for how this will work.</p>

<h3>Installing the Project Type</h3>

<p>You would start by installing the VSIX package from the VS gallery. This will install the DotNetNuke project type, and make this project type available to you when you create new projects in VS.</p>

<h3>Create a New Project</h3>

<p>You can now create a new &ldquo;DotNetNuke&rdquo; project using Visual Studio.</p>

<p><img src="http://darrelltunnell.net/assets/posts/new%20dnn%20project.PNG" alt="new dnn project.PNG" /></p>

<p>This creates your new project. It also imports the &ldquo;DnnPackager&rdquo; NuGet package automatically - <a href="http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/">something I have blogged about seperately.</a></p>

<p><img src="http://darrelltunnell.net/assets/posts/adding%20DnnPackager.PNG" alt="adding DnnPackager.PNG" /></p>

<p>Your new project, has it&rsquo;s own &ldquo;.dnnproj&rdquo; file. This is a new project type and that&rsquo;s why it has its own file extension &ldquo;.dnnproj&rdquo;.</p>

<p><img src="http://darrelltunnell.net/assets/posts/SolutionExplorer1.PNG" alt="SolutionExplorer1.PNG" /></p>

<h3>Adding Content</h3>

<p>You can now add items to your project. If you &ldquo;Add new item&rdquo; - you will be able select from a number of standard DotNetNuke item templates. For example a &ldquo;Module View&rdquo;.</p>

<p><img src="http://darrelltunnell.net/assets/posts/AddModuleView.png" alt="AddModuleView.png" /></p>

<p>Initially, I will just show Dnn 7 compatible item templates, but eventually I&rsquo;d also like to add a seperate group for Dnn 8 item templates, which would include item templates for the new MVC and SPA stuff.</p>

<p>When you add the new item, not only do the source code files get added to your project, but any required dependencies also get brought in by the magical power of NuGet:</p>

<p><img src="http://darrelltunnell.net/assets/posts/AddingDotNetNukeCoreNuget.PNG" alt="AddingDotNetNukeCoreNuget.PNG" /></p>

<p>So for example, adding a Module View for Dnn 7, will automatically bring in the DotNetNuke.Core NuGet package for Dnn7 as depicted above.</p>

<p>In other words, you don&rsquo;t need to worry about adding any Dnn assembly references for the most part, as they will be bought in for you as you add items to your project. Ofcourse, you are still free to add references to other dependencies you might have as normal.</p>

<h3>Running and Debugging</h3>

<p>When you want to run and debug your extension, for those of you that have read my previous blog about DnnPackager, you may recall that this could be accomplished via a command that you could enter in the Package Manager Console window and DnnPackager would handle the deployment and attaching the debugger.</p>

<p>Well that approach was only ever necessary because there was not any first class support within VS itself. Something I am going to rectify with the DotNetNuke project type.</p>

<p>In VS, I am going to extend the debugging toolbar (where the &ldquo;play&rdquo; button is)</p>

<p><img src="http://darrelltunnell.net/assets/posts/debug%20toolbar.PNG" alt="debug toolbar.PNG" /></p>

<p>You can see in the screenshot there is an empty dropdown at present, but this will list your DotNetNuke websites that you have on your local IIS. The first one in that list will be selected by default.</p>

<p>You may also notice there a new Debugger selected in that screenshot called &ldquo;Local Dnn Website&rdquo;. That&rsquo;s my own custom debugger that&rsquo;s available only for this project type.</p>

<p>All you need to do is click &ldquo;Play&rdquo; and it will:</p>

<ol>
<li>Build your project to output the deployment zip.</li>
<li>Deploy your install zip to the Dnn website selected in the dropdown.</li>
<li>Attach the debugger to Dnn website&rsquo;s worker process that is selected in the dropwdown.</li>
<li>Launch a new browser window, navigated to that dnn websites home page.</li>
</ol>


<p>Therefore, to use a different Dnn website as the host for running and debugging your module, you would just select that website in the drop down instead, before you click the &ldquo;play&rdquo; button.</p>

<p>This is going to wayyyy better than previous workflows for Dnn development.</p>

<h2>What Now?</h2>

<p>Well.. I am pretty far into the development of this at the moment, which is why I have been able to include some screenshots. However it is a steep learning curve, and I am continuosly hitting hurdles with <a href="https://github.com/Microsoft/VSProjectSystem">Microsoft&rsquo;s new Project System (CPS)</a>. This is my first attempt at developing a VS project type and I don&rsquo;t have any in roads with microsoft or any support. So all of this means, I am &ldquo;hoping&rdquo; I can pull this off, and the signs are promising, but I&rsquo;m not through the woods yet. The (very) dark, mystical woods, of VS project type development.</p>

<p>Still, I&rsquo;d love to hear what others think of this - even though I appreciate it&rsquo;s very premature. Would you use such a system? Any ideas for improvements? I&rsquo;ll release a new blog post when things are looking a bit more finalised, and perhaps again when I have something for beta release.</p>

<p>Lastly, if there are any guru&rsquo;s out there who have expertise with <a href="https://github.com/Microsoft/VSProjectSystem">CPS</a> - I can always use a hand ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DnnPackager - Getting Started]]></title>
    <link href="http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/"/>
    <updated>2015-12-01T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started</id>
    <content type="html"><![CDATA[<h2>Dnn Packager - Super Smooth Module Development</h2>

<p>In this post, I am going to show you how to get up and running with DnnPackager for your DotNetNuke module / extension development.</p>

<h2>Tools of the Trade</h2>

<p>I am using VS2015 Community Edition, but this should work equally well with previous versions.</p>

<!-- more -->


<h2>Installing DotNetNuke Locally</h2>

<p>You will need a local instance of DotNetNuke website installed so that you have somewhere to deploy / run and debug your modules. There are plenty of tutorials out there that cover how to install a Dnn website so I am not going to cover this here. If you think this would be useful, leave a comment below and I might consider it! Once you have a working Dnn Website installed under your local IIS - please read on!</p>

<h2>Create a Project</h2>

<p>Open Visual Studio, and Create a New &ldquo;ASP.NET Empty Web Application&rdquo; project. Make sure you select &ldquo;.NET 4&rdquo; from the drop down at the top.</p>

<p><img src="http://darrelltunnell.net/assets/posts/NewAspNetProject.PNG" alt="New Project" /></p>

<p>Note: Create your project wherever you like - where you put your source code - that&rsquo;s your business!</p>

<h2>Tweak Web Project</h2>

<p>The reason we choose to create a web project in the previous step, rather than say - a library project, is just so that we have appropriate context menu options in visual studio for doing things like adding javascript and ascx files etc. This is generally handy for Dnn module development. However our project can not actually run as a &ldquo;standalone website&rdquo; - as we are developing a Dnn module - which can only run within the context of the Dnn website that is hosting it. The approach described in this blog should work equally well if you prefer to create other types of projects - but then you might not have those familiar menu options available, so you may have to add things like javascript files to your project by hand.</p>

<p>Select the project in Solution Explorer window, then in the properties window, change &ldquo;Always Start When Debugging&rdquo; to false.</p>

<p><img src="http://darrelltunnell.net/assets/posts/alwaysstartwhendebuggingfalse.PNG" alt="alwaysstartwhendebuggingfalse.PNG" /></p>

<p>This will help later as it will prevent Visual Studio from needlessly trying to host your module project as its own website whenever you try and debug your module - which will be running in your local Dnn website instead.</p>

<h2>Add DnnPackager NuGet Package</h2>

<p>Open the Package Manager Console (Tools &ndash;> NuGet Package Manager) and (With your project selected in the &ldquo;Default Project&rdquo; dropdown, type into it the following command and hit enter to install the DnnPackager NuGet package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Install-Package DnnPackager
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://darrelltunnell.net/assets/posts/NuGetConsoleAddDnnPackagerNuGet.PNG" alt="NuGetConsoleAddDnnPackagerNuGet.PNG" /></p>

<p>This will add some new items to your project, and to your solution. I will cover what these are for later.</p>

<p><img src="http://darrelltunnell.net/assets/posts/ProjectAfterAddingDnnPackager.PNG" alt="ProjectAfterAddingDnnPackager.PNG" /></p>

<h2>Dnn Sdk Assemblies</h2>

<p>In order to proceed with Dnn development, we will actually need to add references to the Dnn assemblies. Depending on the version of DotNetNuke you want your extension to be compatible with will often determine what version of the Dnn assemblies you will need to reference.</p>

<p>For the sake of this blog post I am going to assume that you are going to target the latest version of Dnn (at the time of writing this is Dnn 7)</p>

<p>Using the Package Manager Console again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Install-Package DotNetNuke.Core
</span></code></pre></td></tr></table></div></figure>


<p>This should add a reference to the DotNetNuke assembly to your project&rsquo;s references:</p>

<p><img src="http://darrelltunnell.net/assets/posts/ReferencesAfterAddingDnnCore.PNG" alt="ReferencesAfterAddingDnnCore.PNG" /></p>

<h2>Let&rsquo;s Develop a Module!</h2>

<p>Now we have got most of the setup out of the way, it&rsquo;s time to get cracking on our module!</p>

<p>First add a new User Control to the project. This is going to be the default UI for our super cool DNN module.</p>

<p><img src="http://darrelltunnell.net/assets/posts/AddUserControl.PNG" alt="AddUserControl.PNG" /></p>

<p>We then need to change our new User Control to make it inherit from <code>PortalModuleBase</code> rather than <code>System.Web.UI.UserControl</code>.</p>

<p>So change this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">MySuperModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Default</span> <span class="p">:</span> <span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">UserControl</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">void</span> <span class="nf">Page_Load</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">DotNetNuke.Entities.Modules</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">MySuperModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Default</span> <span class="p">:</span> <span class="n">PortalModuleBase</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">void</span> <span class="nf">Page_Load</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Don&rsquo;t forget to add the &lsquo;using&rsquo; statement depicted above! </strong></p>

<h2>Making an awesome module</h2>

<p>Further development of this super awesome module is beyond the scope of this post, so I am just going to make it display something really simple for the time being. There are <a href="http://www.dnnsoftware.com/community-blog/cid/141749/dotnetnuke-module-development-101-5--hello-world-3-using-visual-studio-to-create-a-module">plenty of other resources</a> out there for learning about Dnn module development. For now let&rsquo;s  make it display some text.</p>

<p>Add the following h1 content to your markup for the user control:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ Control Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Default.ascx.cs&quot; Inherits=&quot;MySuperModule.Default&quot; %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>I came, I read a blog, I conquered!<span class="nt">&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Module Manifest</h2>

<p>Now that we have this incredible&hellip; work of art, naturally we want to run it and test it out. In order to do this though, we first need to make sure our module is going to identify itself with DotNetNuke correctly. This means it should have a manifest.</p>

<p>One of the files that was automatically added to your project when you added the DnnPackager NuGet package was: manifest.dnn</p>

<p>Open up manifest.dnn and replace the values in square brackets with appropriate values. You only need to do this once.</p>

<p>For example, you will see something that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dotnetnuke</span> <span class="na">type=</span><span class="s">&quot;Package&quot;</span> <span class="na">version=</span><span class="s">&quot;6.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packages&gt;</span>
</span><span class='line'>    <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&quot;[YourPackageName]&quot;</span> <span class="na">type=</span><span class="s">&quot;Module&quot;</span> <span class="na">version=</span><span class="s">&quot;0.0.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;friendlyName&gt;</span>[FriendlyPackageName]<span class="nt">&lt;/friendlyName&gt;</span>
</span><span class='line'>      <span class="nt">&lt;description&gt;&lt;/description&gt;</span>
</span><span class='line'>      <span class="nt">&lt;owner&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>[OwnerName]<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;organization&gt;</span>[OrganizationName]<span class="nt">&lt;/organization&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url&gt;</span>http://www.someurl.com<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>        <span class="nt">&lt;email&gt;</span><span class="cp">&lt;![CDATA[&lt;a href=&quot;mailto:support@someorg.com&quot;&gt;support@someorg.com&lt;/a&gt;]]&gt;</span><span class="nt">&lt;/email&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/owner&gt;</span>
</span><span class='line'>      <span class="nt">&lt;license</span> <span class="na">src=</span><span class="s">&quot;License.lic&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/license&gt;</span>
</span><span class='line'>      <span class="nt">&lt;releaseNotes</span> <span class="na">src=</span><span class="s">&quot;ReleaseNotes.txt&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/releaseNotes&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;components&gt;</span>
</span><span class='line'>        <span class="nt">&lt;component</span> <span class="na">type=</span><span class="s">&quot;Module&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;desktopModule&gt;</span>
</span><span class='line'>            <span class="nt">&lt;moduleName&gt;</span>[YourModuleName]<span class="nt">&lt;/moduleName&gt;</span>
</span><span class='line'>            <span class="nt">&lt;foldername&gt;</span>[FolderName]<span class="nt">&lt;/foldername&gt;</span>
</span><span class='line'>            <span class="nt">&lt;businessControllerClass</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;supportedFeatures</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;moduleDefinitions&gt;</span>
</span><span class='line'>              <span class="nt">&lt;moduleDefinition&gt;</span>
</span><span class='line'>                <span class="nt">&lt;friendlyName&gt;</span>[Friendly Module Name]<span class="nt">&lt;/friendlyName&gt;</span>
</span><span class='line'>                <span class="nt">&lt;defaultCacheTime&gt;</span>60<span class="nt">&lt;/defaultCacheTime&gt;</span>
</span><span class='line'>                <span class="nt">&lt;moduleControls&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;moduleControl&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlKey&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/controlKey&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlSrc&gt;</span>[YourControllerOrPathToView]/[YourViewFileName].[YourViewFileExtension]<span class="nt">&lt;/controlSrc&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;supportsPartialRendering&gt;</span>False<span class="nt">&lt;/supportsPartialRendering&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlTitle&gt;</span>[Default title when added to page]<span class="nt">&lt;/controlTitle&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlType&gt;</span>View<span class="nt">&lt;/controlType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;helpUrl&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/helpUrl&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/moduleControl&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;moduleControl&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlKey&gt;</span>settings<span class="nt">&lt;/controlKey&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlSrc&gt;</span>[YourControllerOrPathToSettings]/[YourSettingsFileName].[YourSettingsFileExtension]<span class="nt">&lt;/controlSrc&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;supportsPartialRendering&gt;</span>False<span class="nt">&lt;/supportsPartialRendering&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlTitle&gt;</span>[Default settings title]<span class="nt">&lt;/controlTitle&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlType&gt;</span>View<span class="nt">&lt;/controlType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;helpUrl&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/helpUrl&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/moduleControl&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/moduleControls&gt;</span>
</span><span class='line'>                <span class="nt">&lt;permissions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/permissions&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/moduleDefinition&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/moduleDefinitions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/desktopModule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/component&gt;</span>
</span><span class='line'>        <span class="nt">&lt;component</span> <span class="na">type=</span><span class="s">&quot;Assembly&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;assemblies&gt;</span>
</span><span class='line'>            <span class="nt">&lt;assembly&gt;</span>
</span><span class='line'>              <span class="nt">&lt;path&gt;</span>bin<span class="nt">&lt;/path&gt;</span>
</span><span class='line'>              <span class="nt">&lt;name&gt;</span>[YourAssembly.dll]<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/assembly&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/assemblies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/component&gt;</span>
</span><span class='line'>        <span class="nt">&lt;component</span> <span class="na">type=</span><span class="s">&quot;ResourceFile&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;resourceFiles&gt;</span>
</span><span class='line'>            <span class="nt">&lt;basePath&gt;</span>DesktopModules/[FolderName]<span class="nt">&lt;/basePath&gt;</span>
</span><span class='line'>            <span class="nt">&lt;resourceFile&gt;</span>
</span><span class='line'>              <span class="nt">&lt;name&gt;</span>Resources.zip<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/resourceFile&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/resourceFiles&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/component&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/components&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/package&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/packages&gt;</span>
</span><span class='line'><span class="nt">&lt;/dotnetnuke&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fill it in so it looks more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dotnetnuke</span> <span class="na">type=</span><span class="s">&quot;Package&quot;</span> <span class="na">version=</span><span class="s">&quot;6.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;packages&gt;</span>
</span><span class='line'>    <span class="nt">&lt;package</span> <span class="na">name=</span><span class="s">&quot;MySuperModule&quot;</span> <span class="na">type=</span><span class="s">&quot;Module&quot;</span> <span class="na">version=</span><span class="s">&quot;0.0.1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;friendlyName&gt;</span>MySuperModule<span class="nt">&lt;/friendlyName&gt;</span>
</span><span class='line'>      <span class="nt">&lt;description&gt;</span>Makes the internet work<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>      <span class="nt">&lt;owner&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Darrell Tunnell<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;organization&gt;</span>Dazinator<span class="nt">&lt;/organization&gt;</span>
</span><span class='line'>        <span class="nt">&lt;url&gt;</span>http://darrelltunnell.net<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>        <span class="nt">&lt;email&gt;</span><span class="cp">&lt;![CDATA[&lt;a href=&quot;mailto:support@someorg.com&quot;&gt;support@someorg.com&lt;/a&gt;]]&gt;</span><span class="nt">&lt;/email&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/owner&gt;</span>
</span><span class='line'>      <span class="nt">&lt;license</span> <span class="na">src=</span><span class="s">&quot;License.lic&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/license&gt;</span>
</span><span class='line'>      <span class="nt">&lt;releaseNotes</span> <span class="na">src=</span><span class="s">&quot;ReleaseNotes.txt&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/releaseNotes&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>      <span class="nt">&lt;components&gt;</span>
</span><span class='line'>        <span class="nt">&lt;component</span> <span class="na">type=</span><span class="s">&quot;Module&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;desktopModule&gt;</span>
</span><span class='line'>            <span class="nt">&lt;moduleName&gt;</span>MySuperModule<span class="nt">&lt;/moduleName&gt;</span>
</span><span class='line'>            <span class="nt">&lt;foldername&gt;</span>MySuperModule<span class="nt">&lt;/foldername&gt;</span>
</span><span class='line'>            <span class="nt">&lt;businessControllerClass</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;supportedFeatures</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;moduleDefinitions&gt;</span>
</span><span class='line'>              <span class="nt">&lt;moduleDefinition&gt;</span>
</span><span class='line'>                <span class="nt">&lt;friendlyName&gt;</span>MySuperModule<span class="nt">&lt;/friendlyName&gt;</span>
</span><span class='line'>                <span class="nt">&lt;defaultCacheTime&gt;</span>-1<span class="nt">&lt;/defaultCacheTime&gt;</span>
</span><span class='line'>                <span class="nt">&lt;moduleControls&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;moduleControl&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlKey&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/controlKey&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlSrc&gt;</span>DesktopModules/MySuperModule/Default.ascx<span class="nt">&lt;/controlSrc&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;supportsPartialRendering&gt;</span>False<span class="nt">&lt;/supportsPartialRendering&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlTitle&gt;</span>Hello<span class="nt">&lt;/controlTitle&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;controlType&gt;</span>View<span class="nt">&lt;/controlType&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;helpUrl&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/helpUrl&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/moduleControl&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/moduleControls&gt;</span>
</span><span class='line'>                <span class="nt">&lt;permissions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/permissions&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/moduleDefinition&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/moduleDefinitions&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/desktopModule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/component&gt;</span>
</span><span class='line'>        <span class="nt">&lt;component</span> <span class="na">type=</span><span class="s">&quot;Assembly&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;assemblies&gt;</span>
</span><span class='line'>            <span class="nt">&lt;assembly&gt;</span>
</span><span class='line'>              <span class="nt">&lt;path&gt;</span>bin<span class="nt">&lt;/path&gt;</span>
</span><span class='line'>              <span class="nt">&lt;name&gt;</span>MySuperModule.dll<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/assembly&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/assemblies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/component&gt;</span>
</span><span class='line'>        <span class="nt">&lt;component</span> <span class="na">type=</span><span class="s">&quot;ResourceFile&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;resourceFiles&gt;</span>
</span><span class='line'>            <span class="nt">&lt;basePath&gt;</span>DesktopModules/MySuperModule<span class="nt">&lt;/basePath&gt;</span>
</span><span class='line'>            <span class="nt">&lt;resourceFile&gt;</span>
</span><span class='line'>              <span class="nt">&lt;name&gt;</span>Resources.zip<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/resourceFile&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/resourceFiles&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/component&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/components&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/package&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/packages&gt;</span>
</span><span class='line'><span class="nt">&lt;/dotnetnuke&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: I removed the entry for the &ldquo;settings&rdquo; for our module as we don&rsquo;t have a settings screen in this example. I also changed the default cache time to -1, which disables caching.. just because I have a feeling this module is going to one day become a lot more dynamic and I don&rsquo;t want outdated content causing confusion :-)</p>

<p>Important: I also set the version number to 0.0.1. Version numbers are important in that Dnn will not let you install an older version of a module over the top of a newer version. The version number in the manifest would have to be equal to, or greater than the currently installed version for it to install over the top.</p>

<h2>Ready to roll</h2>

<p>Sense that tension in the air? The excitement is building.. The entire blog post has been leading to this one, perfect, moment.</p>

<p>We are now going to deploy our module to our local Dnn website, and debug it.</p>

<h2>Automating Deployment</h2>

<p>In VS, go to the &ldquo;Package Manager Console&rdquo; window, and make sure your project is selected from the projects dropdown.</p>

<ol>
<li>Type: <code>Install-Module [name of your website in IIS]</code> and hit enter.</li>
<li>Watch as your module project is built, packaged up as a zip, and then the zip is deployed to your local Dnn website!</li>
</ol>


<p>For example, on my IIS, the name of my Dnn website is &ldquo;DotNetNuke&rdquo;</p>

<p><img src="http://darrelltunnell.net/assets/posts/IISDnnWebsite.PNG" alt="IISDnnWebsite.PNG" /></p>

<p>So I type into the Package Manager Console <code>Install-Module DotNetNuke</code> and hit enter.</p>

<p>After that completes, you can Login to your DotNetNuke website as host, and go to the Host&ndash;>Extensions page, and you should see that your module is now listed as an installed extension! Pretty cool!</p>

<p><img src="http://darrelltunnell.net/assets/posts/hostextensionsmodules.PNG" alt="hostextensionsmodules.PNG" /></p>

<h2>Setting up a Page to Host it</h2>

<p>Although our module has been installed onto our site, it won&rsquo;t display anywhere - because we need to tell DotNetNuke where it should be displayed!</p>

<p>This is a quick one time task, of simply creating a page in DotNetNuke to display our module.</p>

<ol>
<li>Login as Host</li>
<li>Pages &ndash;> Add New Page</li>
<li>Fill out page details and create it.</li>
<li>Modules &ndash;> Add New Module</li>
<li>Add your new module on to the page.</li>
</ol>


<p>You should see:</p>

<p><img src="http://darrelltunnell.net/assets/posts/AddedModule.PNG" alt="AddedModule.PNG" /></p>

<h2>Debugging it &amp; Testing Changes</h2>

<p>Let&rsquo;s make some changes. Add some more content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>I came, I read a blog, I conquered!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Everyday I&#39;m shuffling!<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add some code in your code behind, and set a breakpoint on it:</p>

<p><img src="http://darrelltunnell.net/assets/posts/codebehindbreakpoint.PNG" alt="codebehindbreakpoint.PNG" /></p>

<p>Now deploy this very simply by placing your cursor in the Package Manager Console window, and hitting &ldquo;up&rdquo; arrow on your keyboard. This will bring up the last command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Install-Module DotNetNuke
</span></code></pre></td></tr></table></div></figure>


<p>hit enter.</p>

<p>Once that completes, refresh the page displaying your module:</p>

<p><img src="http://darrelltunnell.net/assets/posts/redeployedmodulewithchanges.PNG" alt="redeployedmodulewithchanges.PNG" /></p>

<p>Simples!</p>

<h2>But wait - my breakpoint wasn&rsquo;t hit!</h2>

<p>That&rsquo;s because your module is being executed within the process running your DotNetNuke website. So what you need to do is &ldquo;attach&rdquo; the debugger to that process.</p>

<p>You can do this manually, or you can let DnnPackager do it for you. To let DnnPackager handle this, go back to the package manager console, and amend that command you are using, by adding on a couple of arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Install-Module DotNetNuke Debug Attach
</span></code></pre></td></tr></table></div></figure>


<p>So do that, and hit enter. You should see it deploy your module as before but this time it will also attach your debugger!</p>

<p>So.. refresh your page.. and BAM! Breakpoint is hit!</p>

<p><img src="http://darrelltunnell.net/assets/posts/breakpointhit.PNG" alt="breakpointhit.PNG" /></p>

<p><strong>You need to be running Visual Studio as an Administrator before you can attach to the w3p process.</strong></p>

<p>The full syntax of the command is (values in braces are optional):</p>

<p><code>Install-Module [name of your website in IIS] {Build Configuration} {Attach}</code></p>

<p>However, if for some strange reason you&rsquo;d prefer to attach to process in some other way, you absolutely can do that - no one is &ldquo;forcing&rdquo; you to use the above command. There are VS extensions you can get to make attaching to IIS processes trivial. Otherwise, within VS, a quick way to do it is do this:</p>

<ol>
<li>Hit ctrl + alt + p</li>
<li>Tick show all processes (if it&rsquo;s not allready)</li>
<li>Select any process in the list, then hit &ldquo;w&rdquo; on your keyboard - this should scroll you to the &ldquo;w3wp.exe&rdquo; process.</li>
<li>Click &ldquo;attach&rdquo;.</li>
</ol>


<p><img src="http://darrelltunnell.net/assets/posts/attachtoprocess.PNG" alt="attachtoprocess.PNG" /></p>

<h2>What about if I just want my Zip file</h2>

<p>If you just want your installation zip for some reason, perhaps you want to upload it to the Dnn store etc, just build your project as normal and check in your projects output directory.</p>

<h2>Issues?</h2>

<p>DnnPackager is open source on GitHub. Feel free to <a href="https://github.com/dazinator/DnnPackager">raise an issue</a></p>

<h2>In Summary</h2>

<p>DnnPackager is an automation tool that I built to help streamline the Dnn module develop workflow. Feel free to drop me a comment - does this tool help? Or have I missed my mark? Where could it be better? I&rsquo;d love to hear suggestions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Android Unit Test Apps (Xamarin) Like a Pro]]></title>
    <link href="http://darrelltunnell.net/blog/2015/11/05/automating-android-unit-test-apps-xamarin-like-a-pro/"/>
    <updated>2015-11-05T19:52:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2015/11/05/automating-android-unit-test-apps-xamarin-like-a-pro</id>
    <content type="html"><![CDATA[<h2>First Off..</h2>

<p>This article is for those of you out there who use Xamarin to write Android applications and want to automate the process of running your tests on an Android device. I&rsquo;ll show you how you can set this up with relative ease.</p>

<p>Here is the process we want:</p>

<!-- more -->


<ol>
<li>CI Build Begins</li>
<li>Produces the APK file containing my tests.</li>
<li>Starts up an Emulator and boots an AVD</li>
<li>Installs the tests APK onto the Android Device (Emulated)</li>
<li>Kicks of the tests</li>
<li>Reports back the test results.</li>
<li>If using Team City the test all appear nicely in the UI - otherwise the results are in STDOUT.</li>
</ol>


<h2>Unit Test App (Android) - and it&rsquo;s shortcomings.</h2>

<p>It all begins with adding the unit tests project itself.
Xamarin have provided a project type in Visual Studio called a &ldquo;Unit Test App&rdquo;. Add one of those projects to your Solution and define some tests.</p>

<p><img src="http://darrelltunnell.net/assets/posts/New%20Android%20Unit%20Test%20Project.PNG" alt="New Android Unit Test Project.PNG" /></p>

<p>Here are some tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">  [TestFixture]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TestsSample</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [SetUp]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Setup</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="na">        [TearDown]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Tear</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Pass</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;test1&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Fail</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">False</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'><span class="na">        [Ignore(&quot;another time&quot;)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Ignore</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [Test]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Inconclusive</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">Inconclusive</span><span class="p">(</span><span class="s">&quot;Inconclusive&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Shortcomings of Running these tests</h2>

<p>Naturally, you may be thinking how do you now run these tests? Well by default you have to manually run them. This is an app. Starting the tests project in VSis like starting any other Android application - it should deploy the APK to your Android device, and launch the app, which then shows a UI, and you must click various buttons on said UI to run the various tests that you want to run MANUALLY.</p>

<h2>An enormous pain in the ass..</h2>

<p>This ofcourse, is a rediculous way forward and we need to get these automated ASAP!</p>

<h2>The short answer</h2>

<p>The short answer, is that we need to take a few steps to get these tests automated.. Read on..</p>

<h2>Step 1 - The NuGet Package</h2>

<p>I created a NuGet package called <a href="https://www.nuget.org/packages/Xamarin.TestyDroid/">TestyDroid</a>.</p>

<p>In order to write this tool, it&rsquo;s fair to say it has taken a fair bit of research and testing!</p>

<p>So - <a href="https://www.nuget.org/packages/Xamarin.TestyDroid/">Install the NuGet package to your tests project</a></p>

<p>It contains two things. Firstly, it contains a command line executable in it&rsquo;s tools folder, called TestyDroid.exe. This little command line will handle spinning up an emulator, installing your tests apk, and running all of your tests and reporting the results, and lastly terminating the emulator once done.</p>

<p>Secondly, it contains an Android library that is added to your Android tests project as a reference. This library includes an improved base class that you will derive form instead of the default Xamrin one. We will cover this in the next step.</p>

<h2>Step 2</h2>

<p>After that is installed, we need to address how these tests get &ldquo;launched&rdquo; in the first place.</p>

<p>Android has the concept of &ldquo;Instrumentation&rdquo;</p>

<p><code>Instrumentation</code> are basically special types, that can be launched via an intent, and can run tests.</p>

<p>So, in order to &ldquo;start&rdquo; the tests running on the Android device (after the APK) has been installed, we need to create this &ldquo;Instrumentation&rdquo; class in our tests project.</p>

<p>Add the following class to your Tests project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">Xamarin.TestyDroid.TestTests</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">    [Instrumentation(Name = &quot;xamarin.testydroid.testtests.TestInstrumentation&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TestInstrumentation</span> <span class="p">:</span> <span class="n">TestyDroid</span><span class="p">.</span><span class="n">Android</span><span class="p">.</span><span class="n">TestyDroidTestSuiteInstrumentation</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">TestInstrumentation</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">handle</span><span class="p">,</span> <span class="n">JniHandleOwnership</span> <span class="n">transfer</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">transfer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">AddTests</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">AddTest</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="n">GetExecutingAssembly</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Imortant to note (adjust the Namespace appropriately) - the Instrumentation Attribute above the class has a &ldquo;Name&rdquo; property. THIS IS VERY IMPORTANT. Make sure it matches yoru namespace + class name, but with the namespace in lower case.</p>

<p>So if you changed the namespace of this class to MyCoolApp.Tests
And you changed the Class Name of this class to MyCoolTestInstrumentation
Then the Attribute above the MyCoolTestInstrumentation class should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na"> [Instrumentation(Name = &quot;mycoolapp.tests.MyCoolTestInstrumentation&quot;)]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">MyCoolTestInstrumentation</span> <span class="p">:</span> <span class="n">TestyDroid</span><span class="p">.</span><span class="n">Android</span><span class="p">.</span><span class="n">TestyDroidTestSuiteInstrumentation</span>
</span><span class='line'>    <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 3 - Jot things down</h2>

<p>We now need to make a note of a few variables that we will need in order to call <code>TestyDroid.exe</code> to run our tests.</p>

<p>The first thing we need is the &ldquo;class path&rdquo; of your tests Instrumentation. This is &ldquo;Name&rdquo; value of the [Instrumentation] attribute in the previous step. For example:</p>

<p><code>xamarin.testydroid.testtests.TestInstrumentation</code></p>

<p>The next thing we need is the Package name of your tests package. This you can grab from the <code>AndroidManifest.xml</code> file.</p>

<p>Here is mine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="na">package=</span><span class="s">&quot;Xamarin.TestyDroid.TestTests&quot;</span> <span class="na">android:versionCode=</span><span class="s">&quot;1&quot;</span> <span class="na">android:versionName=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;uses-sdk</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;application</span> <span class="na">android:label=</span><span class="s">&quot;Xamarin.TestyDroid.TestTests&quot;</span> <span class="na">android:icon=</span><span class="s">&quot;@drawable/Icon&quot;</span><span class="nt">&gt;&lt;/application&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the package name for my tests app is <code>Xamarin.TestyDroid.TestTests</code></p>

<p>You will also need to know some more general paramaters about where things are on our environment:</p>

<ol>
<li>The path to <code>Adb.exe</code> (this is in your android-sdk\platform-tools directory)</li>
<li>The path to <code>Emulator.exe</code> (this is in your android-sdk\tools directory)</li>
<li>The path to your Tests APK file (I will give you a clue - it will probably be in your bin/release/ folder of your tests project!)</li>
<li>The name of the AVD that you would like to be launched in the emulator and used to run the tests on.</li>
</ol>


<p>Once you have these things, you are ready to give TestyDroid.exe a whirl!</p>

<h2>Step 4 - Running things locally.</h2>

<p>Armed with the information in the previous step:</p>

<ol>
<li>Open up a command prompt.</li>
<li>CD to the tools directory of the Xamarin.TestyDroid nuget package you added to your  earlier. It should be something like &ldquo;..path to you solution/packages/Xamarin.TestyDroid.x.x.x/tools/&rdquo;</li>
<li>Run <code>Xamarin.TestyDroid.exe</code> with the arguments it needs! Look here for a breakdown of all the arguments: <a href="https://github.com/dazinator/Xamarin.TestyDroid">https://github.com/dazinator/Xamarin.TestyDroid</a> - or just execute it with the <code>--help</code> argument to see the help screen.</li>
</ol>


<p>Here is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Xamarin.TestyDroid.exe -e &quot;C:\Program Files (x86)\Android\android-sdk\tools\emulator.exe&quot; -d &quot;C:\Program Files (x86)\Android\android-sdk\platform-tools\adb.exe&quot; -f &quot;src\MyTests\bin\Release\MyTests.apk-Signed.apk&quot; -i &quot;AVD_GalaxyNexus_ToolsForApacheCordova&quot; -n &quot;MyTests&quot; -c &quot;mytests.TestInstrumentation&quot; -w 120
</span></code></pre></td></tr></table></div></figure>


<p>Substitute the argument values accordingly.</p>

<p>You should see output similar to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Starting emulator: D:\android-sdk\tools\emulator.exe -avd Xamarin_Android_API_15 -port 5554 -no-boot-anim -prop emu.uuid=013b8394-db8d-4224-a36f-889ce164f74e
</span><span class='line'>
</span><span class='line'>Waiting until: 04/11/2015 19:21:29 for device to complete boot up..
</span><span class='line'>
</span><span class='line'>INSTRUMENTATION_RESULT: passed=1
</span><span class='line'>
</span><span class='line'>INSTRUMENTATION_RESULT: skipped=1
</span><span class='line'>
</span><span class='line'>INSTRUMENTATION_RESULT: inconclusive=1
</span><span class='line'>
</span><span class='line'>INSTRUMENTATION_RESULT: failed=1
</span><span class='line'>
</span><span class='line'>INSTRUMENTATION_CODE: 0
</span><span class='line'>
</span><span class='line'>Killing device: emulator-5554
</span><span class='line'>Sending kill command.
</span><span class='line'>OK: killing emulator, bye bye
</span><span class='line'>
</span><span class='line'>Emulator killed.
</span></code></pre></td></tr></table></div></figure>


<h2>Step 5 - Running On Team City</h2>

<p>Once you have verified you can automate the tests locally, the next step is to set up your build system to run them during your build!</p>

<p>TestyDroid additionally supports reporting Test results in a TeamCity format so that they show up as test results in the TeamCity ui - if that&rsquo;s your build system.</p>

<p>To configure TeamCity it&rsquo;s a case of:</p>

<ol>
<li>An MSBUILD step to build your Tests project (csproj file) such that it outputs the APK (remember to use the target <code>SignAndroidPackage</code> to have the APK produced)</li>
<li>A command line step that calls out to Xamarin.TestyDroid.exe with the necessary arguments.</li>
</ol>


<p>The first step is easy, but the important thing to remember is to set the target to SignAndroidPackage</p>

<p><img src="http://darrelltunnell.net/assets/posts/tc%20commandlineparams%20testydroid.PNG" alt="tc commandlineparams testydroid.PNG" /></p>

<p>That will now take care of producing the APK in the output directory for your project during your team city build.</p>

<p>The second step to create is the one that actually runs the tests using TestyDroid!
The follwing screenshot shows setting up a Command line step to do this:
<img src="http://darrelltunnell.net/assets/posts/tc%20testydroid%20commandlinestep.PNG" alt="tc testydroid commandlinestep.PNG" /></p>

<h2>Step 6 - Admire your tests in Team City.</h2>

<p>Now you can run a build - and if all is well - you should see your tests results added to a tests tab in Team City.</p>

<p><img src="http://darrelltunnell.net/assets/posts/tc%20Tests%20Tab.PNG" alt="tc Tests Tab.PNG" /></p>

<h2>Any Questions?</h2>

<p>I have been someone limited by time so this was fairly rushed together! If there is anything you would like me to elaborate on, please leave a comment below.</p>

<p>Also you can read more information about TestyDroid on Github: <a href="https://github.com/dazinator/Xamarin.TestyDroid/wiki/Getting-Started">https://github.com/dazinator/Xamarin.TestyDroid/wiki/Getting-Started</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 Projects - NuGet-NPM-Gulp-Bower-Jspm-Aurelia]]></title>
    <link href="http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc/"/>
    <updated>2015-08-16T00:00:00+01:00</updated>
    <id>http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc</id>
    <content type="html"><![CDATA[<p><strong>This post is part 1 of a series. Part 2 is <a href="http://darrelltunnell.net/blog/2016/01/24/aurelia-and-asp-net-5-mvc-part2/">here</a></strong></p>

<h2>ASP (A Sea of Packages).NET 5</h2>

<p>When you create a new ASP.NET 5 project, you will see all sorts of new-ness. I am going to guide you, the uninitiated ASP.NET 5 web developer, through creating your first ASP.NET 5 MVC application, but we won&rsquo;t stop there. In the next post of this series, we will then enhance the project with a number of features:</p>

<ol>
<li>Bundling and Minification.</li>
<li>Auto browser refresh (as you make changes to files during development)</li>
</ol>


<p>In addition, I will touch upon important tooling that you need to be aware of:</p>

<ol>
<li>NPM</li>
<li>Bower and why we are going to replace it with Jspm</li>
<li>Gulp - and why is it useful</li>
</ol>


<p>To be able to do all of this, we will be creating an ASP.NET MVC 5 project, and then we will be using <a href="http://aurelia.io/">Aurelia</a> to run an Aurelia application on Home page (Index.cshtml)</p>

<!-- more -->


<h2>New Project</h2>

<p>The first step on our quest is simply to create a new ASP.NET application. I am sure you know the drill:</p>

<ol>
<li>In VS 2015, File &ndash;> New Project</li>
<li>&ldquo;ASP.NET Web Application&rdquo;
<img src="http://darrelltunnell.net/assets/posts/new%20aspnet%20project.PNG" alt="new aspnet project.PNG" /></li>
<li>&ldquo;Web Application&rdquo;
<img src="http://darrelltunnell.net/assets/posts/new%20aspnet%20project%202.PNG" alt="new aspnet project 2.PNG" /></li>
</ol>


<h2>Project Structure</h2>

<p>At this point, with the project created, let&rsquo;s stop and appreciate some noteworthy files in our new project.</p>

<p><img src="http://darrelltunnell.net/assets/posts/asp%20net%20project%20sol%20explorer.PNG" alt="asp net project sol explorer.PNG" /></p>

<ul>
<li><code>project.json</code> - this is the new form of the project file. It replaces for example the older <code>.csproj</code> and <code>.vbproj</code> files.</li>
<li><code>package.json</code> - this file is managed by <a href="https://docs.npmjs.com/">NPM</a>. It records the dependencies that your application has on NPM packages. More on NPM later.</li>
<li><code>bower.json</code> - this file is managed by <a href="http://bower.io/">Bower</a>. It records the dependencies that your application has on Bower packages. More on Bower later.</li>
<li><code>gulpfile.js</code> - this file contains <code>tasks</code> that can be executed by <a href="http://gulpjs.com/">Gulp</a> as part of your development workflow, for example, whenever the project is built, cleaned etc. More on this later.</li>
<li><code>Startup.cs</code> this is the entry point for your application. For the purposes of this article, the default code is fine and we won&rsquo;t be amending anything in this file. It contains bootstrapping code such as setting up and registering services such as authentication.</li>
</ul>


<h3>NPM - it&rsquo;s an important citizen</h3>

<p><a href="https://docs.npmjs.com/">NPM</a> is now a first class citizen of an ASP.NET 5 project. This is why you have a <code>package.json</code> file in your project.</p>

<p><img src="http://darrelltunnell.net/assets/posts/packages%20json%20file.PNG" alt="packages json file.PNG" /></p>

<p>NPM is a package manager - the Node Package Manager to be precise. Think <code>NuGet</code> but for NodeJs packages. You could be forgiven for thinking it stands for &ldquo;Not another Package Manager&rdquo; - it doesn&rsquo;t, I checked.</p>

<p>If you aren&rsquo;t yet familiar with NPM, stop here and do yourself a favour - go <a href="https://docs.npmjs.com/">get familiar</a>, you will be seeing a lot of it in your ASP.NET 5 projects in the days to come!</p>

<h3>Hold on, another Package Manager? But we allready have NuGet?</h3>

<p>NuGet is for .NET libraries like log4net silly. Npm has a vast array of packages not available through NuGet. Why wouldn&rsquo;t you want to tap into those also?</p>

<h3>Bower</h3>

<p>Here is where things get a tiny bit confusing. Bower is a package, that is also another package manager. I am tempted to move on.. but I&rsquo;ll explain.</p>

<p>Bower is a NodeJs program, and is therefore distributed as a NodeJs package, via <code>NPM</code>. However it&rsquo;s purpose in life is to be a package manager, but specifically for client (website) dependencies such as javascript or css. Think Jquery. If you want to add Jquery, or Bootstrap, or any other client side library to your project, then Bower would be the package manager to use to achieve that. Not NPM (<a href="https://www.npmjs.com/package/jquery">although you could</a>), and not NuGet (<a href="https://www.nuget.org/packages/jQuery/">although you could</a>). The ASP.NET team thinks <code>Bower</code> is the package manager to use as Bower specialises for client dependencies - so the ASP.NET 5 project is set up by default to use Bower and you may allready see some Bower packages downloaded into your <code>bower_components</code> folder within your project. The <code>bower.json</code> file keeps track of your bower dependencies.</p>

<p>However, in this walkthrough, we shall be scrapping <code>Bower</code> and using a different package manager for our JQueries and our Bootstraps. One called <a href="http://jspm.io/">Jspm</a>. Jspm is recomended for it&rsquo;s additional capabilities, mainly that it provides not just package management features (at dev time) but package loading features, that your application uses at runtime.</p>

<h3>Gulp</h3>

<p><a href="http://gulpjs.com/">Gulp</a> is what all the cool kids are using to automate their development workflows.</p>

<p>Gulp basically lets you define <code>tasks</code> in a javascript file (gulpfile.js) that can then be run at an appropirate point. VS 2015 has a <code>Task Runner Explorer</code> window in which you can pick which Gulp tasks (the ones defined in your gulpfile.js) that you would like to run and when. For example, you can have your gulp task executed whenever the project is built, or cleaned etc. You can also execute your gulp task via the command line (see the Gulp docs)</p>

<p>We are going to write some Gulp tasks in gulpfile.js, and have them executed as part of the our project&rsquo;s build process. These tasks are going to automatically handle bundling and minification of our javascript files for us.</p>

<p>Our web application is going to reference the &ldquo;bundle&rdquo; of javascript that gulp outputs, rather than the individual javascript files that we download using jspm. Which means our application is going to be nice and optimised as the browser will have to do less roundtrips with the server (network requests) to load the required javascript.</p>

<h3>But won&rsquo;t bundling and minification lead to a poor debugging experience?</h3>

<p>Not if sourcemaps are enabled. I will show you how to enable this. This will mean the browser will be requesting and running the optimised bundle of javascript - but you the developer, will be stepping through and reading the original source code in your browser&rsquo;s dev tools, thanks to the magical power of source maps.</p>

<p>However, I will also show you what to do if you just don&rsquo;t want to bundle / minify your javascript during development (not all browsers will support source maps yet). If bundling and minification is something you only want to do at the time of a release build - which is pretty sensible - then I&rsquo;ll cover that too.</p>

<h2>Stay tuned</h2>

<p>In the next post/s, we will begin modifying our ASP.NET 5 project to do the things I have discussed:</p>

<ol>
<li><a href="http://darrelltunnell.net/blog/2016/01/24/aurelia-and-asp-net-5-mvc-part2/">Replace Bower with JSPM</a></li>
<li>Bring in Aurelia</li>
<li>Get an Aurelia application working on the Index.cshtml page</li>
<li>Enable bundling and minification via a Gulp task</li>
<li>Enable automatic browser refresh</li>
<li>Disable bundling when our application is running in development (to maintain an easy debugging experience should your browser not support source maps)</li>
</ol>


<p>If there is anything else you would like me to cover in this series, drop me a comment below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DotNetNuke - Streamlining Module Development Workflow]]></title>
    <link href="http://darrelltunnell.net/blog/2015/06/13/dotnetnuke-streamlining-module-development/"/>
    <updated>2015-06-13T00:00:00+01:00</updated>
    <id>http://darrelltunnell.net/blog/2015/06/13/dotnetnuke-streamlining-module-development</id>
    <content type="html"><![CDATA[<h2>Module Debugging - Two Approaches</h2>

<p>When developing DotNetNuke modules people take many different approaches but they boil down to two alternatives in terms of workflow:</p>

<ol>
<li><p>Placing / checking out your source code directly into the \DesktopModules folder of a DotNetNuke website, and having your module dll&rsquo;s output to directly into the DotNetNuke website&rsquo;s \bin folder.</p></li>
<li><p>Checking out and working on your code wherever you like, but having to deploy your module (content and assemblies) to a local DNN website when you are ready to run it.</p></li>
</ol>


<p>Both approaches require that you &ldquo;attach to process&rdquo; from within Visual Studio in order to debug your module.</p>

<!-- more -->


<h3>I hate approach #1</h3>

<p>I have all sorts of issues with approach #1. Yes it’s technically possible, but it’s also nasty in my view (not very clean) - I have elaborated on that elsewhere so won’t do so again here in depth, aside to say that I believe #2 is the &ldquo;cleanest&rdquo; approach and that many forms of debugging use #2 as the approach, not #1. For example, xamarin devs, when they debug an android app, you will see that xamarin actually deploys their project to the device / emulator, and then attaches the debugger to the remote process that&rsquo;s running on the device / emulator. The result is that they click &ldquo;Play&rdquo; in VS, and a shortwhile later they are attached and stepping through their code.. It may not be obvious that a deployment took place - but it did. Lastly. i&rsquo;ll point out that #1 creates a coupling between how you structure your source code, and where it needs to be when it&rsquo;s actually deployed.</p>

<h3>But approach #2 is lacking</h3>

<p>So deciding to take approach #2, having to manually copy / deploy your module content  to the DotNetNuke website each time you want to test your module, is just not an efficient use of your time!</p>

<p>What&rsquo;s needed is some nice visual studio integration so that when you are ready to &ldquo;Run / Debug&rdquo; your module, you click one button and bam! chrome opens up, displaying your module, with the debugger attached so you can step through code.</p>

<h3>Can anything be done?</h3>

<p>I have allready made strides to address the inefficiences of #2 so that it&rsquo;s now a lot more streamlined: <a href="https://github.com/dazinator/DnnPackager">https://github.com/dazinator/DnnPackager</a> - it&rsquo;s a NuGet package that you add to any VS project, and it will produce the Dnn module installation zip for you when you build the project. It then also extends the package manager console window in VS with an additional command you can run, that will deploy the module project to a local DNN website. So this is the workflow I currently use for module debugging:</p>

<ol>
<li>Make a change to the code</li>
<li>Hit “up” arrow and then hit “enter” in package manager console (this runs the previous command which is the DnnPackager one I spoke of, that builds and deploys my module project to my local dnn website)</li>
<li>Refresh my browser page, and attach Visual Studio (ctrl + alt + p) to the w3w process.</li>
</ol>


<p>This is a bit more streamlined! This makes approach #2 workable in my opinion.</p>

<h3>Room for Improvements!</h3>

<ol>
<li>What if I don’t have a DNN website already installed - for example I am new to Dnn development and just want to get up and running as quickly as possible.</li>
<li>What if I am curious to know if my module runs in DNN 6.5.1 and I only have DNN7 installed?</li>
<li>What if this is the first time I am testing this particular module - I have to make sure I go to DotNetNuke website, Create a page and add my module to that page right?</li>
</ol>


<p>These things are all tedious. Most developers (new to DNN) expect to be able to click Debug and immediately be debugging their code - they don’t expect to have to jump through these additional hurdles / barriers.</p>

<p>This is why DotNetNuke development can be a bit of a culture shock for many developers.</p>

<h3>Next Feature!</h3>

<p>So the next feature I am thinking of adding to DnnPackager is one that addresses those concerns mentioned above. I’d be really greatful if anyone with such a curiousity wouldn&rsquo;t mind reading it and offering their feedback on this proposed awesome feature <a href="https://github.com/dazinator/DnnPackager/issues/14">https://github.com/dazinator/DnnPackager/issues/14</a> - just so I can get a feel for whether there is much demand for such a capability.</p>

<h3>Feedback?</h3>

<p>Do you disagree?
Would this new feature <a href="https://github.com/dazinator/DnnPackager/issues/14">https://github.com/dazinator/DnnPackager/issues/14</a> help you?</p>

<p>Darrell Tunnell
<a href="http://darrelltunnell.net">http://darrelltunnell.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating DotNetNuke Deployments With Octopus Deploy]]></title>
    <link href="http://darrelltunnell.net/blog/2015/04/29/automating-dotnetnuke-deployments-with-octopus-deploy/"/>
    <updated>2015-04-29T00:00:00+01:00</updated>
    <id>http://darrelltunnell.net/blog/2015/04/29/automating-dotnetnuke-deployments-with-octopus-deploy</id>
    <content type="html"><![CDATA[<h2>Automating DotNetNuke Deployments using Octopus Deploy</h2>

<p>Because I am an awesome dude, i&rsquo;ll share with you how I automate dotnetnuke delivery / deployments. This works. It takes some effort to get this set up though, but it will be well worth it in the end.</p>

<p>First i&rsquo;ll explain the process for automating the deployment of the DotNetNuke website itself. Then I&rsquo;ll explain how you can automate the deployment of modules / extensions on a continous basis.</p>

<h2>Preparation work</h2>

<ol>
<li>Set up a brand new DotNetNuke website, and go through the install wizard until you are greeted with an empty default dotnetnuke website.</li>
<li>Stop the website. Create a NuGet package containing the website folder.</li>
<li>Put that on your internal NuGet feed.</li>
<li>Go to the dotnetnuke database, and generate the create scripts (with data).</li>
<li>Create a new console application that uses <a href="http://dbup.github.io/">dbup</a> to run the above sql scripts when it is executed (as described <a href="http://dbup.github.io/">here</a>). Remember to replace things like server name etc in the sql scripts with appropriate $variablename$. Dbup can substitute $variablename$ in the sql scripts with their actual values (which you can pass through from Octopus) before it executes them.</li>
<li>Add <a href="http://docs.octopusdeploy.com/display/OD/Using+OctoPack">OctoPack</a> to your Console Application so that it is packaged up into a NuGet package. Put this NuGet package on your internal NuGet feed.</li>
</ol>


<p>You should now be in this position:</p>

<ol>
<li>You have a NuGet package on your feed containing the DotNetNuke website content</li>
<li>You have a NuGet package on your feed containing your wonderful console application (DbUp) which will run the database scripts.</li>
</ol>


<p>Next Step - to Octopus!</p>

<ol>
<li><p>Create a project in Octopus to deploy a &ldquo;DotNetNuke&rdquo; website. For the deployment process you will need the NuGet packages prepared previously. The deployment process should:</p></li>
<li><p>Create a website in IIS using the website NuGet package.</p></li>
<li>Create the database by executing the executable within the Database NuGet package.</li>
</ol>


<p>There are lot&rsquo;s of things to remember when deploying dotnetnuke. I won&rsquo;t go into detail but things like:</p>

<ul>
<li>Granting full permission to the app pool identity that the website runs under to the website folder.</li>
<li>Updating the portalalias table with appropriate access url.</li>
</ul>


<p>&hellip; and other things. The Dnn install process has been covered elsewhere so I won&rsquo;t go into any further detail here.</p>

<h2>Congratulations (partly)</h2>

<p>You should now be in a postion where you can roll out a DotNetNuke website via Octopus.. BUT WHAT ABOUT THE MODULES I&rsquo;M DEVELOPING!! - I hear you exclaim.</p>

<h2>Automating Module Deployments</h2>

<ol>
<li><p>When you build your module projects (via build server etc) you want them packaged as DotNetNuke install packages, inside a NuGet deployment package, which is then published to your NuGet feed. You can use <a href="https://github.com/dazinator/DnnPackager">DnnPackager</a> for this (which is something I created).</p></li>
<li><p>You&rsquo;d need something that can copy a set of zip files to the &ldquo;Install/Module&rdquo; folder of a DotNetNuke website, and then monitor that folder, whilst calling the DotNetNuke url to install packages (www.dotnetnuke.com/install/install.aspx?mode=installresources). I wrote a quick console application to do this. It repeats calls to that URL all the time the number of zips in the install folder decrements (dotnetnuke deletes them after they are installed). If after x calls, there are the same number of zips left in the directory, it assumes they cannot be installed and reports a failure (return code).
You should package this tool up into a NuGet package and, you guessed it, stick it on your internal feed.</p></li>
</ol>


<p>3.Create a project in Octopus for &ldquo;Module&rdquo; deployment. You want the deployment process to:</p>

<ul>
<li>Dowload the NuGet package containing your module zips.</li>
<li>Download the NuGet package containing your module deployment utility (that console app i spoke of)</li>
<li>Invoke your deployment tool exe, passing in arguments for where the module zip files were placed, what the website url is, and potentially the path to the Install/Modules folder on disk (although my own tool interrogated IIS based on the website URL to find the website directory)</li>
</ul>


<p> ## Full Congratulations</p>

<p> You will now find that you can create a release of your module project in Octopus and deploy all your lates modules to any DotNetNuke website at the push of a button.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Far Does the XRM SDK's ExecuteMultipleRequest Get You?]]></title>
    <link href="http://darrelltunnell.net/blog/2015/02/26/how-far-does-the-xrm-sdk-s-executemultiplerequest-get-you/"/>
    <updated>2015-02-26T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2015/02/26/how-far-does-the-xrm-sdk-s-executemultiplerequest-get-you</id>
    <content type="html"><![CDATA[<h2>ExecuteMultipleRequest - Let&rsquo;s take it to the max</h2>

<p>In this post, I will explore what kinds of things can be achieved using the SDK&rsquo;s ExecuteMultipleRequest, by starting of with a simple SQL command, and implementing a semantically equivalent ExecuteMultipleRequest, and then slowly introducing some additional complexity - so that, we can see some areas where the SDK starts to fall short!</p>

<!-- more -->


<h2>Starting Simple</h2>

<p>Consider this SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well you hardly need a ExecuteMultipleRequest for this, but if you really wanted to you could create one no problem. I am going to assume you are already familiar with the code to create a ExecuteMultipleRequest - if not it&rsquo;s described <a href="https://msdn.microsoft.com/en-gb/library/jj863631.aspx">here.</a></p>

<p>This equates to the following:</p>

<p>Either:-</p>

<ol>
  <li>A single CreateRequestMessage.</li>
  <li>An ExecuteMultipleRequest containing a single CreateRequestMessage.</li>
</ol>


<p>I hope you are with me so far..</p>

<h2>Take It Up A Notch</h2>

<p>Let&rsquo;s now imagine that when a contact is INSERTED, an <code>accountnumber</code> is generated on the server, and that we want to grab this value using a single roundtrip with the server.</p>

<p>Here&rsquo;s it is in T-SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">OUTPUT</span> <span class="n">inserted</span><span class="p">.</span><span class="n">accountnumber</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This equates to the following using the SDK:-</p>

<p>SORRRY DAVE. YOU CAN&rsquo;T DO THAT.</p>

<p>The problem being, is that to do this in one roundtrip with the CRM server means building an ExecuteMultipleRequest that contains:-</p>

<ol>
  <li>A CreateRequestMessage (to insert / create the contact)</li>
  <li>A RetrieveRequestMessage (to retrieve the accountnumber of the inserted contact)</li>
</ol>


<p>However in order to construct the appropriate RetrieveRequestMessage we need to know the ID of what the inserted contact will be in advance. If you look at the SQL query - we are not specifying an ID in advance - therefore we cannot perform the equivalent to this query.</p>

<h2>A bit further..</h2>

<p>With the previous example in mind, consider the following SQL</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">contactid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">OUTPUT</span> <span class="n">inserted</span><span class="p">.</span><span class="n">accountnumber</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;2f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">,</span> <span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are quick, you&rsquo;ve already cottoned on that this one is possible, and it equates to:-</p>

<p>An ExecuteMultipleRequest (ContinueOnError = false) containing:-</p>

<ol>
  <li>A CreateRequestMessage (to insert / create the contact) 
  </li>
  <li>A RetrieveRequestMessage - to retrieve the &#8220;accountnumber&#8221; of the created entity)</li>
</ol>


<h2>Let&rsquo;s start to push the boat out a little.</h2>

<p>Here is a batch of T-SQL commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">contact</span> <span class="k">SET</span> <span class="n">lastname</span> <span class="o">=</span> <span class="s1">&#39;Johnson&#39;</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;3a4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">contact</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;4b4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we know that SQL Server would execute that SQL, by executing each sql command within that batch in sequence, and if there were any errors it will not continue to process the rest of the commands in the same batch. It would also not execute that batch within a transaction, so it would not roll back should errors occur half way through etc.</p>

<p>This equates to:</p>

<p>An ExecuteMultipleRequest (ContinueOnError = false) - containing the following messages:</p>

<ol>
  <li>A CreateRequestMessage (to insert / create the contact) 
  </li>
  <li>An UpdateRequestMessage(to update the contact)</li>
  <li>A DeleteRequestMessage</li>
</ol>


<p>It seems like this is a good fit between the SQL and an ExecuteMultipleRequest.</p>

<h2>The boat is now heading towards the open ocean</h2>

<p>Let&rsquo;s add a bit of complexity to the previous T-SQL - consider this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">contactid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">OUTPUT</span> <span class="n">inserted</span><span class="p">.</span><span class="n">accountnumber</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;2f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">,</span> <span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">contact</span> <span class="k">SET</span> <span class="n">lastname</span> <span class="o">=</span> <span class="s1">&#39;Johnson&#39;</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;3a4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">contact</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;4b4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first command in that batch of SQL commands is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">contactid</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">OUTPUT</span> <span class="n">inserted</span><span class="p">.</span><span class="n">accountnumber</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;2f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">,</span> <span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we know that this actually equates to 2 seperate RequestMessages, a CreateRequest and a RetrieveRequest. We then also need to do an Update and a then a Delete. So this equates to:</p>

<p>An ExecuteMultipleRequest (ContinueOnError = false)</p>

<p>Containing:</p>

<ol>
  <li>A CreateRequestMessage (to insert / create the contact) 
  </li>
  <li>A RetrieveRequestMessage - to retrieve the &#8220;accountnumber&#8221; of the created entity.</li>
  <li>An UpdateRequestMessage</li>
  <li>A DeleteRequestMessage</li>
</ol>


<p>Ok good so far!</p>

<h2>Should look at Boat Breakdown cover</h2>

<p>Now consider this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">OUTPUT</span> <span class="n">inserted</span><span class="p">.</span><span class="n">accountnumber</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">contact</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this says is:</p>

<ol>
<li>We want to Insert a Contact, output its account number.</li>
<li>Then in a second &ldquo;batch&rdquo; of sql statements - we want to Delete a contact. The second batch needs to execute regardless of any problem or outcome from the first batch - (The GO keyword is used as a batch seperator in T-SQL)</li>
</ol>


<p>What this translates into is:</p>

<ol>
<li>A CreateRequest that allways needs to be executed.</li>
<li>A RetreiveRequest (to retrieve the &ldquo;accountnumber&rdquo;) which should only be executed if the preceeding CreateRequest succeeds.</li>
<li>A DeleteRequest that allways needs to be executed.</li>
</ol>


<p>Can we construct the equivalent ExecuteMultipleRequest to do that?</p>

<p>Well.. the answer is.. we can semantically construct an appropriate ExecuteMultipleRequest, but it won&rsquo;t be supported by CRM - because you are not allowed to nest ExecuteMultipleRequest - if you do the CRM server will throw an error when you send it such a request.</p>

<p>Here is what that looks like though (if only it was supported by the server!)</p>

<ol>
<li>An ExecuteMultipleRequest (ContinueOnError = true) Containing:

<ol>
<li>An ExecuteMultipleRequest (ContinueOnError = false) Containing:

<ol>
<li>A CreateRequest to create the contact</li>
<li>A RetrieveRequestMessage - to retrieve the &ldquo;accountnumber&rdquo; of created entity</li>
</ol>
</li>
<li>A DeleteRequestMessage</li>
</ol>
</li>
</ol>


<p>As I say, constructing such a Request is possible, but the CRM server won&rsquo;t process it due to current runtime limitations that are imposed about not allowing nested ExecuteMultipleRequests.</p>

<p>So - unfortunately we have hit a CRM limitation here.</p>

<p>But what you could do, is, on the client side, split that SQL statement on the <code>GO</code> keyword, to get each <code>batch</code> of T-SQL commands. Then for each batch, construct and send an appropriate ExecuteMultipleRequest for the statements in that batch.</p>

<h2>What have we learned so far</h2>

<p>The ExecuteMultipleRequest provides the ability to send a single &ldquo;batch&rdquo; of commands to the server. Thinking from a SQL perspective, this is akin to sending all the statements upto a &ldquo;GO&rdquo; keyword (batch seperator). To get the same behaviour as SQL though, you should set <code>ContinueOnError</code> to false - so that processing halts if any request in the batch errors.</p>

<p>The ExecuteMultipleRequest is not a good fit for sending multiple individual <code>batches</code> of operations to the CRM server, as there is no way to group the Requests within a ExecuteMultipleRequest into their batches. For this reason it&rsquo;s probably best to think of ExecuteMultipleRequest as a single SQL batch and to always use <code>ContinueOnError</code> = false if you want to mirror the behaviour of SQL as closely as possible.</p>

<h2>A weird scenario - can send multiple batches in one go - as long as each batch contains 1 RequestMessage only.</h2>

<p>Consider the following T-SQL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">contact</span> <span class="p">(</span><span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;albert&#39;</span><span class="p">,</span> <span class="s1">&#39;einstein&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">contact</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">contact</span> <span class="k">SET</span> <span class="n">firstname</span> <span class="o">=</span> <span class="s1">&#39;bob&#39;</span> <span class="k">WHERE</span> <span class="n">lastname</span> <span class="o">=</span> <span class="s1">&#39;Hoskins&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">GO</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this scenario - each batch of commands contains only a single command. What this means is that you can construct an ExecuteMultipleRequest with &lsquo;ContinueOnError&rsquo; set to true, and there will be no danger that a particular command in a batch will error, and that the rest of the commands in that batch will execute regardless - because there is only a single command in each batch!</p>

<p>For an example of the danger I am referring to here, consider this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">contact</span> <span class="k">WHERE</span> <span class="n">contactid</span> <span class="o">=</span> <span class="s1">&#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">account</span> <span class="k">WHERE</span> <span class="n">primarycontactid</span> <span class="o">=</span> <span class="s1">&#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">GO</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">contact</span> <span class="k">SET</span> <span class="n">firstname</span> <span class="o">=</span> <span class="s1">&#39;bob&#39;</span> <span class="k">WHERE</span> <span class="n">lastname</span> <span class="o">=</span> <span class="s1">&#39;Hoskins&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">GO</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first batch above, contains 2 operations. The second batch contains 1.</p>

<p>Now imagine, that for the above - we constructed an ExecuteMultipleRequest, and set &lsquo;ContinueOnError&rsquo; to true (to enable the server to process both batches regardless of whether the first batch fails.)
Well in that scenario, because the first batch actually contains 2 operations, the &lsquo;ContinueOnError&rsquo; = true would actually apply to each operation within that batch as well. So you could hit a scenario where the first Delete in that first batch errored, but then CRM continued on regardless to execute the second DELETE etc. This is not what the semantics of the above SQL query conveys - i.e the equivalent CRM beahviour for the above SQL query would be for it to stop processing a particular batch as soon as it hits an error. The only way this can be satisfied at present is if each batch only contains a single RequestMessage.</p>

<h2>Conclusion</h2>

<p>If you would like to send a batch of commands to the CRM server in one go, the good news is you can. The bad news is, it&rsquo;s not perfect, there are limitations, and hopefully I have shown you just about how far you can stretch things.</p>

<p>If you need to send multiple batches of commands to the CRM server in one go, the good news is you can if each batch contains only a single request message (i.e Create, Retreive, Delete, Update etc) - the bad news is, if thats not the case, then you will need to send each batch as an individual ExecuteMultipleRequest, and implement your own &ldquo;ContinueOnError&rdquo; behaviour clientside such that should one ExecuteMultipleRequest fail to be processed it doesn&rsquo;t halt subsequent batches (ExecuteMultipleRequests) from being processed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 (vNext) Projects - Your NuGet Package May Fail to Install Correctly]]></title>
    <link href="http://darrelltunnell.net/blog/2015/01/18/asp-net-5-vnext-projects-why-your-nuget-package-may-fail-to-install/"/>
    <updated>2015-01-18T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2015/01/18/asp-net-5-vnext-projects-why-your-nuget-package-may-fail-to-install</id>
    <content type="html"><![CDATA[<h3>Don&rsquo;t assume NuGet Packages that you have authored will continue to work with ASP.NET 5 (vNext) projects.</h3>

<p>Over the past year or so, I have authored <a href="https://www.nuget.org/packages?q=darrell.tunnell">a number of NuGet packages</a> - because, well&hellip; I am just an all around great guy.</p>

<p>Recently, <a href="http://stackoverflow.com/questions/27762659/error-while-adding-nuget-package-to-asp-net-vnext-project#comment44383264_27762659">I was contacted by someone</a> who was trying to use one of my NuGet packages with an ASP.NET vNext project (Preview release). Not something I have tried before - and this is where things get a little interesting.</p>

<!-- more -->


<h3>When NuGet packages are installed into an ASP.NET vNext project - powershell scripts included in the package, are not run.</h3>

<p>As most NuGet package authors will already know, it&rsquo;s a <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package#Automatically_Running_PowerShell_Scripts_During_Package_Installation_and_Removal">standard feature of NuGet</a> that you can include powershell scripts within your NuGet package, that will then be executed when your package is installed (or uninstalled) into a visual studio project / solution.</p>

<p>Many NuGet packages out there currently rely on this feature - else they will not work.</p>

<p>Well, the issue with my NuGet package failing to install into an ASP.NET vNext project  was eventually posted on the asp.net forums, and <a href="http://forums.asp.net/members/davidfowl.aspx">David Fowler</a> (who&rsquo;s on the ASP.NET team) - kindly responded with some insight into the matter. He seems to suggest that <a href="http://forums.asp.net/t/2027698.aspx?Error+while+adding+NuGet+package+to+ASP+NET+vNext+project">ASP.NET v5 does not support running the packages powershell scripts when you install a NuGet package into an ASP.NET v5 project.</a></p>

<p>I wanted to confirm that with him a second time - because <strong>that&rsquo;s a huge problem for some of my NuGet packages</strong>, but as you will see from that thread, I am still awaiting a secondary confirmation of this - although his first answer seems pretty clear cut.</p>

<h3>Surely this is documented somewhere - or perhaps ASP.NET 5 offers an alternative mechanism for running tasks on installation / uninstallation of a NuGet package?</h3>

<p>I have tried to look for more information. At the moment all I have to go on is David Fowlers response. Perhaps this is because there is still work in progress in this area, who knows. All I can suggest is that if your NuGet package currently requires custom tasks to be performed and you are using an <code>init</code>, <code>install</code> or <code>uninstall</code> ps1 script - then be prepared for the fact that it may not work with ASP.NET 5 projects - and also be prepared for the fact that there may not be any workaround either. I seriously hope this is false speculation on my part - but if this does turn out the be true after ASP.NET 5 is released, I&rsquo;ll be left with a slightly bitter taste in my mouth.</p>

<h3>So where from here?</h3>

<p>I am generally really excited about ASP.NET 5. I love what the team are doing. However I beleive that the ASP.NET team really should put some guidance out there to the NuGet community, so that NuGet package authors can gain an understanding of how their packages might have to change to work in the context of ASP.NET 5 projects.</p>

<p>At a minimum, if ASP.NET 5 will indeed no longer support the running of these powershell scripts, then it should atleast warn you that the package contains such scripts and that they will not be executed - which means the package may not beahve as desired.</p>

<p>My hope is that David Fowler or someone from the ASP.NET team will offer a clarification, insight, or workaround for this issue that makes it a non issue. Fingers crossed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CRM / Plugin Generated Values - and Reducing Roundtrips!]]></title>
    <link href="http://darrelltunnell.net/blog/2014/12/22/crm-plugin-generated-values-and-reducing-roundtrips/"/>
    <updated>2014-12-22T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2014/12/22/crm-plugin-generated-values-and-reducing-roundtrips</id>
    <content type="html"><![CDATA[<h2>Setting the Scene</h2>

<p>Imagine we have an application that uses the CRM SDK. It needs to:</p>

<ol>
<li>Create a new <code>account</code> entity in crm.</li>
<li>Get some value that was just generated as a result of a synchronous plugin that fires on the create. For example, suppose there is a plugin that generates an account reference number.</li>
</ol>


<h2>The &ldquo;I don&rsquo;t care about network latency method!&rdquo;</h2>

<p>The &lsquo;I don&rsquo;t care about network latency&rsquo; way of dealing with this is to just do 2 seperate Requests (roundtrips) with the CRM server.</p>

<ol>
<li>Create the new <code>account</code> which returns you the ID.</li>
<li>Retrieve the <code>account</code> using that ID, along with the values that you need.</li>
</ol>


<p>This approach is sub optimal where network latency is a concern, as it incurs the penalty of making two roundtrips accross the network with the server, where 1 is possible.</p>

<p>Let&rsquo;s now have a look at the &ldquo;I&rsquo;m running on a 56k modem method&rdquo; of doing the same thing!</p>

<!-- more -->


<h2>The &ldquo;I&rsquo;m running on a 56k modem method&rdquo; - this weeks pro tip!</h2>

<p>For quite some time now - as of <code>CRM 2011 Update Rollup 12 - (SDK 5.0.13)</code> you can utilise the <a href="http://msdn.microsoft.com/en-gb/library/jj863604.aspx">Execute Multiple</a> request to do this kind of thing in one roundtrip with the CRM server.</p>

<p>Here is an example of creating an account, and retrieiving it in a single round trip:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>                <span class="c1">// Create an ExecuteMultipleRequest object.</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">multipleRequests</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ExecuteMultipleRequest</span><span class="p">()</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// Assign settings that define execution behavior: continue on error, return responses. </span>
</span><span class='line'>                    <span class="n">Settings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ExecuteMultipleSettings</span><span class="p">()</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">ContinueOnError</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">ReturnResponses</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="c1">// Create an empty organization request collection.</span>
</span><span class='line'>                    <span class="n">Requests</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OrganizationRequestCollection</span><span class="p">()</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">entity</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Entity</span><span class="p">(</span><span class="s">&quot;account&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">entity</span><span class="p">.</span><span class="n">Id</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">();</span>
</span><span class='line'>                <span class="n">entity</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;experimental test&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">CreateRequest</span> <span class="n">createRequest</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CreateRequest</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">Target</span> <span class="p">=</span> <span class="n">entity</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">RetrieveRequest</span> <span class="n">retrieveRequest</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RetrieveRequest</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">Target</span> <span class="p">=</span> <span class="k">new</span> <span class="n">EntityReference</span><span class="p">(</span><span class="n">entity</span><span class="p">.</span><span class="n">LogicalName</span><span class="p">,</span> <span class="n">entity</span><span class="p">.</span><span class="n">Id</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">ColumnSet</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ColumnSet</span><span class="p">(</span><span class="s">&quot;createdon&quot;</span><span class="p">)</span> <span class="c1">// list the fields that you want here</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">multipleRequests</span><span class="p">.</span><span class="n">Requests</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">createRequest</span><span class="p">);</span>
</span><span class='line'>                <span class="n">multipleRequests</span><span class="p">.</span><span class="n">Requests</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">retrieveRequest</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Execute all the requests in the request collection using a single web method call.</span>
</span><span class='line'>                <span class="n">ExecuteMultipleResponse</span> <span class="n">responseWithResults</span> <span class="p">=</span> <span class="p">(</span><span class="n">ExecuteMultipleResponse</span><span class="p">)</span><span class="n">orgService</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">multipleRequests</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">createResponseItem</span> <span class="p">=</span> <span class="n">responseWithResults</span><span class="p">.</span><span class="n">Responses</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>                <span class="n">CreateResponse</span> <span class="n">createResponse</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">createResponseItem</span><span class="p">.</span><span class="n">Response</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">createResponse</span> <span class="p">=</span> <span class="p">(</span><span class="n">CreateResponse</span><span class="p">)</span><span class="n">createResponseItem</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">retrieveResponseItem</span> <span class="p">=</span> <span class="n">responseWithResults</span><span class="p">.</span><span class="n">Responses</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">RetrieveResponse</span> <span class="n">retrieveResponse</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">retrieveResponseItem</span><span class="p">.</span><span class="n">Response</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">retrieveResponse</span> <span class="p">=</span> <span class="p">(</span><span class="n">RetrieveResponse</span><span class="p">)</span><span class="n">retrieveResponseItem</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">retrieveResponse</span><span class="p">.</span><span class="n">Entity</span><span class="p">[</span><span class="s">&quot;createdon&quot;</span><span class="p">]);</span> <span class="c1">// yup - we got the value we needed!</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What happened?</h2>

<p>Both the CreateRequest, and the RetrieveRequest (for the created entity) are batched up into a single Request and shipped off to the CRM server for processing.</p>

<p>CRM processed them in that order, collated the responses together, and returned them in a single batch.</p>

<h2>Caveats</h2>

<p>One caveat of this approach is that, if you intend to grab the generated values for an entity that is being created, then you need to know in advance what the ID will be.</p>

<p>This means you have to specify the ID of the entity when you create it yourself - you can&rsquo;t let CRM auto create the new ID.</p>

<p>For updates / deletes this is a non issue, as the ID is allready known.</p>

<h2>Last thoughts - SQL Optimisation</h2>

<p>I speculate that specifying your own ID&rsquo;s <em>might be a bad thing</em> if you don&rsquo;t use Sequential Guid&rsquo;s.</p>

<p>When CRM generates Id&rsquo;s for you, it generates them sequentially, and I beleive there may be SQL performance benefits to this in terms of index optimisation etc. So if using Guid.NewGuid() to create your new Id&rsquo;s you may want to check with a SQL guru first to understand any impact of using random Guid&rsquo;s as Id&rsquo;s on performance of the CRM tables! That said - Microsoft do support this, so it can&rsquo;t be too bad..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Dynamics CRM Plugins]]></title>
    <link href="http://darrelltunnell.net/blog/2014/12/14/unit-testing-crm-plugins/"/>
    <updated>2014-12-14T17:50:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2014/12/14/unit-testing-crm-plugins</id>
    <content type="html"><![CDATA[<h2>There is no <del>Spoon</del> CRM</h2>

<p>The purpose of this post will be to look at the code for a fairly typical looking crm plugin, and examine how to implement a unit test with the least possible effort. Reduced Effort == Reduced Person Hours == Reduced Cost.</p>

<p>Remember, this is Unit Testing, not Integration testing - so at test time - there is no CRM!</p>

<!-- more -->


<h2>A plugin - and it&rsquo;s requirements</h2>

<p>Firstly, let&rsquo;s look at a plugin that we will call the <code>ReclaimCreditPlugin</code>. Here are the requirements:</p>

<blockquote><ol>
<li>It must run only within a transaction with the database.</li>
<li>When a Contact entity is Updated, if the contact has a parent account, and that parent account is &ldquo;on hold&rdquo; then set the &ldquo;taketheirshoes&rdquo; flag on the contact record to true.</li>
</ol>
</blockquote>

<h2>Developer Jon Doe</h2>

<p>Jon Doe immediately gets to work on writing the plugin for those requirements. He produces the following plugin:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">ReclaimCreditPlugin</span> <span class="p">:</span> <span class="n">IPlugin</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">IServiceProvider</span> <span class="n">serviceProvider</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">executionContext</span> <span class="p">=</span> <span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">)</span><span class="n">serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 1. We must run only within a transaction</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">executionContext</span><span class="p">.</span><span class="n">IsInTransaction</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidPluginExecutionException</span><span class="p">(</span><span class="s">&quot;The plugin detected that it was not running within a database transaction. The plugin requires a database transaction.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 2. Get the contact, check its parent account.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">executionContext</span><span class="p">.</span><span class="n">InputParameters</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;Target&quot;</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">executionContext</span><span class="p">.</span><span class="n">InputParameters</span><span class="p">[</span><span class="s">&quot;Target&quot;</span><span class="p">]</span> <span class="k">is</span> <span class="n">Entity</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Obtain the target entity from the input parameters.</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">contactEntity</span> <span class="p">=</span> <span class="p">(</span><span class="n">Entity</span><span class="p">)</span><span class="n">executionContext</span><span class="p">.</span><span class="n">InputParameters</span><span class="p">[</span><span class="s">&quot;Target&quot;</span><span class="p">];</span>
</span><span class='line'>                <span class="c1">// Get the parent account id.</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">parentAccountId</span> <span class="p">=</span> <span class="p">(</span><span class="n">EntityReference</span><span class="p">)</span><span class="n">contactEntity</span><span class="p">[</span><span class="s">&quot;parentaccountid&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Get the parent account entity.</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">orgServiceFactory</span> <span class="p">=</span> <span class="p">(</span><span class="n">IOrganizationServiceFactory</span><span class="p">)</span><span class="n">serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IOrganizationServiceFactory</span><span class="p">));</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">orgService</span> <span class="p">=</span> <span class="n">orgServiceFactory</span><span class="p">.</span><span class="n">CreateOrganizationService</span><span class="p">(</span><span class="n">executionContext</span><span class="p">.</span><span class="n">UserId</span><span class="p">);</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">parentAccountEntity</span> <span class="p">=</span> <span class="n">orgService</span><span class="p">.</span><span class="n">Retrieve</span><span class="p">(</span><span class="s">&quot;account&quot;</span><span class="p">,</span> <span class="n">parentAccountId</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="k">new</span> <span class="n">ColumnSet</span><span class="p">(</span><span class="s">&quot;creditonhold&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">var</span> <span class="n">accountOnHold</span> <span class="p">=</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="n">parentAccountEntity</span><span class="p">[</span><span class="s">&quot;creditonhold&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">accountOnHold</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">contactEntity</span><span class="p">[</span><span class="s">&quot;taketheirshoes&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>                    <span class="kt">var</span> <span class="n">tracingService</span> <span class="p">=</span> <span class="p">(</span><span class="n">ITracingService</span><span class="p">)</span><span class="n">serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ITracingService</span><span class="p">));</span>
</span><span class='line'>                    <span class="n">tracingService</span><span class="p">.</span><span class="n">Trace</span><span class="p">(</span><span class="s">&quot;Have indicated that we should take the shoes from contact: {0}&quot;</span><span class="p">,</span> <span class="n">contactEntity</span><span class="p">.</span><span class="n">Id</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Good Job?</h3>

<p>Take a moment to peer review the above code. Would you vindicate Jon Doe&rsquo;s effort? It seems it has all the required logic in all the required places. It appears he has covered the list of requirements. Although Jon doesn&rsquo;t check to make sure the current entity being updated is definately a contact entity.. But within the confines of this blog post we will assume that there is no possible danger that the plugin could ever be registered against the wrong entity.</p>

<p>So.. does it actually work?</p>

<h2>Does it work?</h2>

<p>Assuming you want to start haemorrhaging people&rsquo;s time accross the organisation, one way to find out if this code works is to immediately go through the process of deploying it to a QA environment, getting someone to test it manually, and then repeating that cycle of Dev &ndash;> Deployment &ndash;> QA as often as necessary, until the tester gives the thumbs up.</p>

<p>If you want to go that route, feel free to skip the rest of this article. Otherwise read on, where sanity awaits!</p>

<h2>Show me a Unit Test Already!</h2>

<p>Bad news for you. I could.. but I won&rsquo;t.</p>

<h2>Why won&rsquo;t you show me a unit test?</h2>

<p>In short, because I value my time. Just look at that code again for crying out loud! It&rsquo;s littered with dependencies on things that are only provided at runtime by Dynamics CRM - things like:</p>

<ol>
<li>IServiceProvider</li>
<li>IPluginExecutionContext</li>
<li>IOrganizationServiceFactory</li>
<li>IOrganizationService</li>
<li>ITracingService</li>
</ol>


<p><strong>WHAT THE HELL ARE ANY OF THESE THINGS TO DO WITH THE ACTUAL REQUIREMENTS THAT I <em>NEED</em> TO TEST???</strong></p>

<p>Listen.. I read those requirements for this plugin. I read them atleast one thousand times. And I wrote them in fact. Here they are again:</p>

<blockquote><ol>
<li>It must run only within a transaction with the database.</li>
<li>When a Contact entity is Updated, if the contact has a parent account, and that parent account is &ldquo;on hold&rdquo; then set the &ldquo;taketheirshoes&rdquo; flag on the contact record to true.</li>
</ol>
</blockquote>

<p>So with that in mind, can you please show me the requirement dictating: <code>When a contact is updated, it is of upmost importance to us as a business that it looks at the</code>IPluginExecutionContext<code>and grabs the</code>IOrganizationServiceFactory.`</p>

<p>Or please show me where the requirements state: <code>When a contact is updated, the plugin absolutely must interact with the</code>IServiceProvider` because otherwise you know.. Our business just won&rsquo;t function anymore.</p>

<p>No my friends. The requirements do not say <em>any of that</em>. I am in the business of testing against the requirements.</p>

<h3>Why is that a problem?</h3>

<p>The problem is not obvious at first glance. It is definately technically possible to mock / fake all of those services at unit test time. You can use something like RhinoMocks or another Mocking library to mock out <code>IServiceProvider</code> for the purposes of your test. You would then have to mock out all the calls to <code>IServiceProvider</code> that are made, so that it returns your other &lsquo;mocked&rsquo; services like a mock &lsquo;IPluginExecutionContext&rsquo; etc etc - and down the rabbit hole you go.</p>

<p>The problem, is about <em>effort</em>. This approach, although technically possible, requires significant <em>effort</em>. You would have to mock a tonne of runtime services and interactions. We have to ask ourselves, is all that effort really necessary? Sometimes it may be, but most of the time, it isn&rsquo;t. In this instance it definately isn&rsquo;t and I will explain why.</p>

<h2>Let&rsquo;s use the requirements to write the plugin, in pseudo code.</h2>

<p>With those requirements - forget everything you know about Dynamics Crm and write your ideal pseudo code that would implement those requirements. This is the actual logic we care about testing.</p>

<p>PSEUDO CODE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">if</span> <span class="p">(!</span><span class="n">IsRunningInTransaction</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Throw</span> <span class="s">&quot;Plugin requires a transaction.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">If</span> <span class="p">(</span><span class="n">IsUpdateOf</span><span class="p">(</span><span class="s">&quot;contact&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">contact</span> <span class="p">=</span> <span class="n">GetTargetEntity</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">account</span> <span class="p">=</span> <span class="n">GetAccountForContact</span><span class="p">(</span><span class="n">contact</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">isOnHold</span> <span class="p">=</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="n">account</span><span class="p">[</span><span class="s">&quot;creditonhold&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">isOnHold</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">contact</span><span class="p">[</span><span class="s">&quot;taketheirshoes&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Look at that Pseudo Code -  Do you see <em>any</em> runtime services?</h2>

<p>Notice how it contains only the logic we really care about testing - the logic as described by the requirements. It doesn&rsquo;t contain needless fluff. No <code>IServiceProvider</code>, No <code>IPluginExecutionContext</code>. It looks very simple, very basic. If we could actually write a CRM plugin like this, it would be about 1.5 million times easier to test. Well we can.</p>

<h2>Isolating out dependencies is the key to unit testing.</h2>

<p>Yes it&rsquo;s true folks you heard it here first. The less dependencies you utilise directly in your methods, the easier they are to unit test.</p>

<p>With this principle in mind, let&rsquo;s revisit our plugin and refactor it to remove some dependencies.</p>

<h2>New and Improved Plugin</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'> <span class="k">public</span> <span class="k">class</span> <span class="nc">ReclaimCreditPlugin2</span> <span class="p">:</span> <span class="n">IPlugin</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">private</span> <span class="n">IServiceProvider</span> <span class="n">_ServiceProvider</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">IServiceProvider</span> <span class="n">serviceProvider</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_ServiceProvider</span> <span class="p">=</span> <span class="n">serviceProvider</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Execute</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>        <span class="c1">/// This is the method containing the business logic that we want to be able to assert at unit test time.</span>
</span><span class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 1. We must run only within a transaction</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">IsInTransaction</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidPluginExecutionException</span><span class="p">(</span><span class="s">&quot;The plugin detected that it was not running within a database transaction. The plugin requires a database transaction.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 2. Get the contact</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">contact</span> <span class="p">=</span> <span class="n">GetTargetEntity</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 3. Get the Parent Account for the contact.</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">parentAccount</span> <span class="p">=</span> <span class="n">GetAccountEntity</span><span class="p">(</span><span class="n">contact</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">parentAccount</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 4. If credit on hold, set taketheirshoes.</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">accountOnHold</span> <span class="p">=</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span><span class="n">parentAccount</span><span class="p">[</span><span class="s">&quot;creditonhold&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">accountOnHold</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">contact</span><span class="p">[</span><span class="s">&quot;taketheirshoes&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>        <span class="c1">/// Returns the parent account entity for the contact.</span>
</span><span class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>        <span class="c1">/// &lt;param name=&quot;contact&quot;&gt;&lt;/param&gt;</span>
</span><span class='line'>        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">virtual</span> <span class="n">Entity</span> <span class="nf">GetAccountEntity</span><span class="p">(</span><span class="n">Entity</span> <span class="n">contact</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Get the p[arent account id.</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">parentAccountId</span> <span class="p">=</span> <span class="p">(</span><span class="n">EntityReference</span><span class="p">)</span><span class="n">contact</span><span class="p">[</span><span class="s">&quot;parentaccountid&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get an instance of the IOrganisationService.</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">orgServiceFactory</span> <span class="p">=</span> <span class="p">(</span><span class="n">IOrganizationServiceFactory</span><span class="p">)</span><span class="n">_ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IOrganizationServiceFactory</span><span class="p">));</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">executionContext</span> <span class="p">=</span> <span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">)</span><span class="n">_ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">));</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">orgService</span> <span class="p">=</span> <span class="n">orgServiceFactory</span><span class="p">.</span><span class="n">CreateOrganizationService</span><span class="p">(</span><span class="n">executionContext</span><span class="p">.</span><span class="n">UserId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Get the account entity, with only the column / attribute that we need.</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">parentAccountEntity</span> <span class="p">=</span> <span class="n">orgService</span><span class="p">.</span><span class="n">Retrieve</span><span class="p">(</span><span class="s">&quot;account&quot;</span><span class="p">,</span> <span class="n">parentAccountId</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="k">new</span> <span class="n">ColumnSet</span><span class="p">(</span><span class="s">&quot;creditonhold&quot;</span><span class="p">));</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">parentAccountEntity</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>        <span class="c1">/// Returns the current &quot;Target&quot; entity that the plugin is executing against.</span>
</span><span class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">virtual</span> <span class="n">Entity</span> <span class="nf">GetTargetEntity</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">)</span><span class="n">_ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">InputParameters</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;Target&quot;</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">context</span><span class="p">.</span><span class="n">InputParameters</span><span class="p">[</span><span class="s">&quot;Target&quot;</span><span class="p">]</span> <span class="k">is</span> <span class="n">Entity</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">contactEntity</span> <span class="p">=</span> <span class="p">(</span><span class="n">Entity</span><span class="p">)</span><span class="n">context</span><span class="p">.</span><span class="n">InputParameters</span><span class="p">[</span><span class="s">&quot;Target&quot;</span><span class="p">];</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">contactEntity</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'>        <span class="c1">/// Returns whether the plugin is currently enrolled within a database transaction.</span>
</span><span class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'>        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
</span><span class='line'>        <span class="k">protected</span> <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">IsInTransaction</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">)</span><span class="n">_ServiceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">));</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">context</span><span class="p">.</span><span class="n">IsInTransaction</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What just happened?</h2>

<p>I applied a technique called the <a href="http://taswar.zeytinsoft.com/2009/03/08/extract-and-override-refactoring-technique/">Extract and Override</a> technique, to remove the concrete references to all of those CRM runtime only services from within the Execute method, and instead they are now referenced within virtual methods which can be overriden at unit test time.</p>

<p>For example rather than having the following code directly within the execute method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>  <span class="kt">var</span> <span class="n">executionContext</span> <span class="p">=</span> <span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">)</span><span class="n">serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IPluginExecutionContext</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// 1. We must run only within a transaction</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">executionContext</span><span class="p">.</span><span class="n">IsInTransaction</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>It has been replaced by a call to virtual method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="n">IsInTransaction</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the interactions with the various CRM runtime Services now occur within Virtual methods, we no longer need to mock them up at unit test time. Say goodbye to having to mockup <code>IPluginExecutionContext</code>, <code>IServiceProvider</code> or <em>any</em> of the Crm runtime services. All we need to do now is just override the various virtual methods that our Execute() method calls, and return appropriate values at test time.</p>

<h2>Ok so - Now will you show me a Unit Test??</h2>

<p>Certainly Sir / Madame. Now that I can write one within a few minutes as opposed to a few hours, your wish is my command:-</p>

<p>For the purpose of our unit tests all we do, is create a class that derives from our original plugin class, but overrides the various virtual methods to provide different values at test time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'> <span class="k">public</span> <span class="k">class</span> <span class="nc">UnitTestableReclaimCreditPlugin</span> <span class="p">:</span> <span class="n">ReclaimCreditPlugin2</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">UnitTestableReclaimCreditPlugin</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">AccountIsOnHold</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>            <span class="n">IsRunningInTransaction</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ContactEntity</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Entity</span><span class="p">(</span><span class="s">&quot;contact&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="n">Entity</span> <span class="nf">GetTargetEntity</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ContactEntity</span><span class="p">[</span><span class="s">&quot;parentaccountid&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">EntityReference</span><span class="p">(</span><span class="s">&quot;account&quot;</span><span class="p">,</span> <span class="n">Guid</span><span class="p">.</span><span class="n">NewGuid</span><span class="p">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ContactEntity</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="n">Entity</span> <span class="nf">GetAccountEntity</span><span class="p">(</span><span class="n">Entity</span> <span class="n">contact</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">accountEntity</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Entity</span><span class="p">(</span><span class="s">&quot;account&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">accountEntity</span><span class="p">[</span><span class="s">&quot;creditonhold&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">AccountIsOnHold</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">accountEntity</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">IsInTransaction</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">IsRunningInTransaction</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">bool</span> <span class="n">AccountIsOnHold</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsRunningInTransaction</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">Entity</span> <span class="n">ContactEntity</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>And here are the Unit Tests</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na"> [TestFixture]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReclaimCreditPluginUnitTests</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">ReclaimCreditPluginUnitTests</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [ExpectedException(typeof(InvalidPluginExecutionException),</span>
</span><span class='line'><span class="na">            ExpectedMessage = &quot;The plugin detected that it was not running within a database transaction&quot;,</span>
</span><span class='line'><span class="na">            MatchType = MessageMatch.Contains)]</span>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Should_Only_Run_Within_Transaction</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// arrange</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnitTestableReclaimCreditPlugin</span><span class="p">();</span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">IsRunningInTransaction</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// act </span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">Execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Should_Take_Shoes_When_Credit_On_Hold</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// arrange</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnitTestableReclaimCreditPlugin</span><span class="p">();</span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">IsRunningInTransaction</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">AccountIsOnHold</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// act </span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">Execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//assert</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">sut</span><span class="p">.</span><span class="n">ContactEntity</span><span class="p">[</span><span class="s">&quot;taketheirshoes&quot;</span><span class="p">],</span> <span class="n">Is</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Should_Not_Take_Shoes_When_Credit_Not_On_Hold</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// arrange</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UnitTestableReclaimCreditPlugin</span><span class="p">();</span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">IsRunningInTransaction</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">AccountIsOnHold</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// act </span>
</span><span class='line'>            <span class="n">sut</span><span class="p">.</span><span class="n">Execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//assert</span>
</span><span class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">That</span><span class="p">(</span><span class="n">sut</span><span class="p">.</span><span class="n">ContactEntity</span><span class="p">[</span><span class="s">&quot;taketheirshoes&quot;</span><span class="p">],</span> <span class="n">Is</span><span class="p">.</span><span class="n">Not</span><span class="p">.</span><span class="n">EqualTo</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Wrapping Up</h2>

<p>I hope I have demonstrated a simple plugin, with a simple set of unit tests. More importantly, I hope I have demonstrated that although it may be technically possible to write a unit test for an exising plugin,  by mocking up every CRM runtime service and interaction that the plugin makes,just because such a thing is possible, doesn&rsquo;t mean you should just do it. First the work has to be justified. To justify just what is necessary, examine the requirements, examine the plugin code, and be absolutely clear on what it is you want to cover in your unit tests. With that in mind, refactor the plugin code to eliminate fluff (extraneoues concrete references to dependencies that are surplus to the requirements that you want to test). Use techniques like the <code>Extract and Override</code> technique to allow you to substitute these dependencies easily at test time. When you do this, you may be surprised at how much simpler it becomes to write unit tests. I would aslo reccommend reading a book on unit testing, I found <a href="http://artofunittesting.com/">The Art of Unit Testing</a> very educational on this topic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Proclamation]]></title>
    <link href="http://darrelltunnell.net/blog/2014/11/16/a-proclamation/"/>
    <updated>2014-11-16T16:20:59+00:00</updated>
    <id>http://darrelltunnell.net/blog/2014/11/16/a-proclamation</id>
    <content type="html"><![CDATA[<p>On this day the 16th November 2014, let it be known that Darrell&rsquo;s blog was rendered forth unto the internet.</p>

<p>Let the knowledge and manner of its creation also be recorded, lest it be lost from mortal ken. Thus humanity, need not be stricken in ignorance and awe, and need not refer to my blogging website as &ldquo;Witchcraft&rdquo; or &ldquo;Devilry&rdquo;.</p>

<h2>The Mechanism of Creation</h2>

<ol>
<li>Inspiration taken from JakeGinnivan&rsquo;s blog which is powered by OctoPress: <a href="http://jake.ginnivan.net/">http://jake.ginnivan.net/</a></li>
<li>Purchased a domain name: darrelltunnell.net</li>
<li>Followed this OctoPress documentation: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li>Hosted on <a href="https://github.com/">https://github.com/</a></li>
</ol>


<h2>A revelation</h2>

<p>And so it came to pass that Darrell Tunnell&rsquo;s blog was incredibly useful to others. Darrell&rsquo;s blog is currently read by 3.1 million people. Web browser requests for Darrell&rsquo;s blog constitute approximately 85.2% of all browser requests made, worldwide. NetFlix was eventually absorbed into Darrell&rsquo;s Blog at the end of 2014, through internet osmosis.</p>
]]></content>
  </entry>
  
</feed>
