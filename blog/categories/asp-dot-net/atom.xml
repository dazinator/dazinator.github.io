<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net | Darrell Tunnell's Blog]]></title>
  <link href="http://darrelltunnell.net/blog/categories/asp-dot-net/atom.xml" rel="self"/>
  <link href="http://darrelltunnell.net/"/>
  <updated>2016-03-19T21:55:23+00:00</updated>
  <id>http://darrelltunnell.net/</id>
  <author>
    <name><![CDATA[Darrell Tunnell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 Projects - NuGet-NPM-Gulp-Bower-Jspm-Aurelia]]></title>
    <link href="http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc/"/>
    <updated>2015-08-16T00:00:00+01:00</updated>
    <id>http://darrelltunnell.net/blog/2015/08/16/aurelia-and-asp-net-5-mvc</id>
    <content type="html"><![CDATA[<p><strong>This post is part 1 of a series. Part 2 is <a href="http://darrelltunnell.net/blog/2016/01/24/aurelia-and-asp-net-5-mvc-part2/">here</a></strong></p>

<h2>ASP (A Sea of Packages).NET 5</h2>

<p>When you create a new ASP.NET 5 project, you will see all sorts of new-ness. I am going to guide you, the uninitiated ASP.NET 5 web developer, through creating your first ASP.NET 5 MVC application, but we won&rsquo;t stop there. In the next post of this series, we will then enhance the project with a number of features:</p>

<ol>
<li>Bundling and Minification.</li>
<li>Auto browser refresh (as you make changes to files during development)</li>
</ol>


<p>In addition, I will touch upon important tooling that you need to be aware of:</p>

<ol>
<li>NPM</li>
<li>Bower and why we are going to replace it with Jspm</li>
<li>Gulp - and why is it useful</li>
</ol>


<p>To be able to do all of this, we will be creating an ASP.NET MVC 5 project, and then we will be using <a href="http://aurelia.io/">Aurelia</a> to run an Aurelia application on Home page (Index.cshtml)</p>

<!-- more -->


<h2>New Project</h2>

<p>The first step on our quest is simply to create a new ASP.NET application. I am sure you know the drill:</p>

<ol>
<li>In VS 2015, File &ndash;> New Project</li>
<li>&ldquo;ASP.NET Web Application&rdquo;
<img src="/assets/posts/new%20aspnet%20project.PNG" alt="new aspnet project.PNG" /></li>
<li>&ldquo;Web Application&rdquo;
<img src="/assets/posts/new%20aspnet%20project%202.PNG" alt="new aspnet project 2.PNG" /></li>
</ol>


<h2>Project Structure</h2>

<p>At this point, with the project created, let&rsquo;s stop and appreciate some noteworthy files in our new project.</p>

<p><img src="/assets/posts/asp%20net%20project%20sol%20explorer.PNG" alt="asp net project sol explorer.PNG" /></p>

<ul>
<li><code>project.json</code> - this is the new form of the project file. It replaces for example the older <code>.csproj</code> and <code>.vbproj</code> files.</li>
<li><code>package.json</code> - this file is managed by <a href="https://docs.npmjs.com/">NPM</a>. It records the dependencies that your application has on NPM packages. More on NPM later.</li>
<li><code>bower.json</code> - this file is managed by <a href="http://bower.io/">Bower</a>. It records the dependencies that your application has on Bower packages. More on Bower later.</li>
<li><code>gulpfile.js</code> - this file contains <code>tasks</code> that can be executed by <a href="http://gulpjs.com/">Gulp</a> as part of your development workflow, for example, whenever the project is built, cleaned etc. More on this later.</li>
<li><code>Startup.cs</code> this is the entry point for your application. For the purposes of this article, the default code is fine and we won&rsquo;t be amending anything in this file. It contains bootstrapping code such as setting up and registering services such as authentication.</li>
</ul>


<h3>NPM - it&rsquo;s an important citizen</h3>

<p><a href="https://docs.npmjs.com/">NPM</a> is now a first class citizen of an ASP.NET 5 project. This is why you have a <code>package.json</code> file in your project.</p>

<p><img src="/assets/posts/packages%20json%20file.PNG" alt="packages json file.PNG" /></p>

<p>NPM is a package manager - the Node Package Manager to be precise. Think <code>NuGet</code> but for NodeJs packages. You could be forgiven for thinking it stands for &ldquo;Not another Package Manager&rdquo; - it doesn&rsquo;t, I checked.</p>

<p>If you aren&rsquo;t yet familiar with NPM, stop here and do yourself a favour - go <a href="https://docs.npmjs.com/">get familiar</a>, you will be seeing a lot of it in your ASP.NET 5 projects in the days to come!</p>

<h3>Hold on, another Package Manager? But we allready have NuGet?</h3>

<p>NuGet is for .NET libraries like log4net silly. Npm has a vast array of packages not available through NuGet. Why wouldn&rsquo;t you want to tap into those also?</p>

<h3>Bower</h3>

<p>Here is where things get a tiny bit confusing. Bower is a package, that is also another package manager. I am tempted to move on.. but I&rsquo;ll explain.</p>

<p>Bower is a NodeJs program, and is therefore distributed as a NodeJs package, via <code>NPM</code>. However it&rsquo;s purpose in life is to be a package manager, but specifically for client (website) dependencies such as javascript or css. Think Jquery. If you want to add Jquery, or Bootstrap, or any other client side library to your project, then Bower would be the package manager to use to achieve that. Not NPM (<a href="https://www.npmjs.com/package/jquery">although you could</a>), and not NuGet (<a href="https://www.nuget.org/packages/jQuery/">although you could</a>). The ASP.NET team thinks <code>Bower</code> is the package manager to use as Bower specialises for client dependencies - so the ASP.NET 5 project is set up by default to use Bower and you may allready see some Bower packages downloaded into your <code>bower_components</code> folder within your project. The <code>bower.json</code> file keeps track of your bower dependencies.</p>

<p>However, in this walkthrough, we shall be scrapping <code>Bower</code> and using a different package manager for our JQueries and our Bootstraps. One called <a href="http://jspm.io/">Jspm</a>. Jspm is recomended for it&rsquo;s additional capabilities, mainly that it provides not just package management features (at dev time) but package loading features, that your application uses at runtime.</p>

<h3>Gulp</h3>

<p><a href="http://gulpjs.com/">Gulp</a> is what all the cool kids are using to automate their development workflows.</p>

<p>Gulp basically lets you define <code>tasks</code> in a javascript file (gulpfile.js) that can then be run at an appropirate point. VS 2015 has a <code>Task Runner Explorer</code> window in which you can pick which Gulp tasks (the ones defined in your gulpfile.js) that you would like to run and when. For example, you can have your gulp task executed whenever the project is built, or cleaned etc. You can also execute your gulp task via the command line (see the Gulp docs)</p>

<p>We are going to write some Gulp tasks in gulpfile.js, and have them executed as part of the our project&rsquo;s build process. These tasks are going to automatically handle bundling and minification of our javascript files for us.</p>

<p>Our web application is going to reference the &ldquo;bundle&rdquo; of javascript that gulp outputs, rather than the individual javascript files that we download using jspm. Which means our application is going to be nice and optimised as the browser will have to do less roundtrips with the server (network requests) to load the required javascript.</p>

<h3>But won&rsquo;t bundling and minification lead to a poor debugging experience?</h3>

<p>Not if sourcemaps are enabled. I will show you how to enable this. This will mean the browser will be requesting and running the optimised bundle of javascript - but you the developer, will be stepping through and reading the original source code in your browser&rsquo;s dev tools, thanks to the magical power of source maps.</p>

<p>However, I will also show you what to do if you just don&rsquo;t want to bundle / minify your javascript during development (not all browsers will support source maps yet). If bundling and minification is something you only want to do at the time of a release build - which is pretty sensible - then I&rsquo;ll cover that too.</p>

<h2>Stay tuned</h2>

<p>In the next post/s, we will begin modifying our ASP.NET 5 project to do the things I have discussed:</p>

<ol>
<li><a href="http://darrelltunnell.net/blog/2016/01/24/aurelia-and-asp-net-5-mvc-part2/">Replace Bower with JSPM</a></li>
<li>Bring in Aurelia</li>
<li>Get an Aurelia application working on the Index.cshtml page</li>
<li>Enable bundling and minification via a Gulp task</li>
<li>Enable automatic browser refresh</li>
<li>Disable bundling when our application is running in development (to maintain an easy debugging experience should your browser not support source maps)</li>
</ol>


<p>If there is anything else you would like me to cover in this series, drop me a comment below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 (vNext) Projects - Your NuGet Package May Fail to Install Correctly]]></title>
    <link href="http://darrelltunnell.net/blog/2015/01/18/asp-net-5-vnext-projects-why-your-nuget-package-may-fail-to-install/"/>
    <updated>2015-01-18T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2015/01/18/asp-net-5-vnext-projects-why-your-nuget-package-may-fail-to-install</id>
    <content type="html"><![CDATA[<h3>Don&rsquo;t assume NuGet Packages that you have authored will continue to work with ASP.NET 5 (vNext) projects.</h3>

<p>Over the past year or so, I have authored <a href="https://www.nuget.org/packages?q=darrell.tunnell">a number of NuGet packages</a> - because, well&hellip; I am just an all around great guy.</p>

<p>Recently, <a href="http://stackoverflow.com/questions/27762659/error-while-adding-nuget-package-to-asp-net-vnext-project#comment44383264_27762659">I was contacted by someone</a> who was trying to use one of my NuGet packages with an ASP.NET vNext project (Preview release). Not something I have tried before - and this is where things get a little interesting.</p>

<!-- more -->


<h3>When NuGet packages are installed into an ASP.NET vNext project - powershell scripts included in the package, are not run.</h3>

<p>As most NuGet package authors will already know, it&rsquo;s a <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package#Automatically_Running_PowerShell_Scripts_During_Package_Installation_and_Removal">standard feature of NuGet</a> that you can include powershell scripts within your NuGet package, that will then be executed when your package is installed (or uninstalled) into a visual studio project / solution.</p>

<p>Many NuGet packages out there currently rely on this feature - else they will not work.</p>

<p>Well, the issue with my NuGet package failing to install into an ASP.NET vNext project  was eventually posted on the asp.net forums, and <a href="http://forums.asp.net/members/davidfowl.aspx">David Fowler</a> (who&rsquo;s on the ASP.NET team) - kindly responded with some insight into the matter. He seems to suggest that <a href="http://forums.asp.net/t/2027698.aspx?Error+while+adding+NuGet+package+to+ASP+NET+vNext+project">ASP.NET v5 does not support running the packages powershell scripts when you install a NuGet package into an ASP.NET v5 project.</a></p>

<p>I wanted to confirm that with him a second time - because <strong>that&rsquo;s a huge problem for some of my NuGet packages</strong>, but as you will see from that thread, I am still awaiting a secondary confirmation of this - although his first answer seems pretty clear cut.</p>

<h3>Surely this is documented somewhere - or perhaps ASP.NET 5 offers an alternative mechanism for running tasks on installation / uninstallation of a NuGet package?</h3>

<p>I have tried to look for more information. At the moment all I have to go on is David Fowlers response. Perhaps this is because there is still work in progress in this area, who knows. All I can suggest is that if your NuGet package currently requires custom tasks to be performed and you are using an <code>init</code>, <code>install</code> or <code>uninstall</code> ps1 script - then be prepared for the fact that it may not work with ASP.NET 5 projects - and also be prepared for the fact that there may not be any workaround either. I seriously hope this is false speculation on my part - but if this does turn out the be true after ASP.NET 5 is released, I&rsquo;ll be left with a slightly bitter taste in my mouth.</p>

<h3>So where from here?</h3>

<p>I am generally really excited about ASP.NET 5. I love what the team are doing. However I beleive that the ASP.NET team really should put some guidance out there to the NuGet community, so that NuGet package authors can gain an understanding of how their packages might have to change to work in the context of ASP.NET 5 projects.</p>

<p>At a minimum, if ASP.NET 5 will indeed no longer support the running of these powershell scripts, then it should atleast warn you that the package contains such scripts and that they will not be executed - which means the package may not beahve as desired.</p>

<p>My hope is that David Fowler or someone from the ASP.NET team will offer a clarification, insight, or workaround for this issue that makes it a non issue. Fingers crossed.</p>
]]></content>
  </entry>
  
</feed>
