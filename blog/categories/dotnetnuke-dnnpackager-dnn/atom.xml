<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dotnetnuke,dnnpackager,dnn | Darrell Tunnell's Blog]]></title>
  <link href="http://darrelltunnell.net/blog/categories/dotnetnuke-dnnpackager-dnn/atom.xml" rel="self"/>
  <link href="http://darrelltunnell.net/"/>
  <updated>2016-03-19T21:24:32+00:00</updated>
  <id>http://darrelltunnell.net/</id>
  <author>
    <name><![CDATA[Darrell Tunnell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Imagining a DotNetNuke Project Type for Visual Studio]]></title>
    <link href="http://darrelltunnell.net/blog/2016/01/17/imagining-a-dotnetnuke-project-type-for-visual-studio/"/>
    <updated>2016-01-17T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2016/01/17/imagining-a-dotnetnuke-project-type-for-visual-studio</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>When developing DotNetNuke extensions, we typically use one of the existing Visual Studio Project Type&rsquo;s, for example - an ASP.NET Web Application project.</p>

<p>Even when using a Project Template such as Christoc&rsquo;s, the project template is still based upon one of the standard Visual Studio project types - usually an ASP.NET Web Application project.</p>

<p>However these Project Types do not &ldquo;gel&rdquo; well with DotNetNuke development in a number of areas, the main ones being:</p>

<ol>
<li>Running the project in VS (clicking play) - wants to run the extensions as a Web Application, but this makes no sense for a Dnn extension - which has to be hosted by the DotNetNuke website.</li>
<li>Deploying the extension - there is no support for that in the project system - you have to manually deploy your extensions to the Dnn instance.</li>
<li>Debugging the extension - you have to manually attach to process.</li>
</ol>


<p>So.. what if there was a new Project Type, one that was purpose built for DotNetNuke development? What would that look like?</p>

<!-- more -->


<h2>Introducing the &ldquo;DotNetNuke&rdquo; Project Type</h2>

<p>I am currently developing a new VS Project Type explicitly for DotNetNuke development. The rest of this blog post will describe my vision for how this will work.</p>

<h3>Installing the Project Type</h3>

<p>You would start by installing the VSIX package from the VS gallery. This will install the DotNetNuke project type, and make this project type available to you when you create new projects in VS.</p>

<h3>Create a New Project</h3>

<p>You can now create a new &ldquo;DotNetNuke&rdquo; project using Visual Studio.</p>

<p><img src="/assets/posts/new%20dnn%20project.PNG" alt="new dnn project.PNG" /></p>

<p>This creates your new project. It also imports the &ldquo;DnnPackager&rdquo; NuGet package automatically - <a href="http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/">something I have blogged about seperately.</a></p>

<p><img src="/assets/posts/adding%20DnnPackager.PNG" alt="adding DnnPackager.PNG" /></p>

<p>Your new project, has it&rsquo;s own &ldquo;.dnnproj&rdquo; file. This is a new project type and that&rsquo;s why it has its own file extension &ldquo;.dnnproj&rdquo;.</p>

<p><img src="/assets/posts/SolutionExplorer1.PNG" alt="SolutionExplorer1.PNG" /></p>

<h3>Adding Content</h3>

<p>You can now add items to your project. If you &ldquo;Add new item&rdquo; - you will be able select from a number of standard DotNetNuke item templates. For example a &ldquo;Module View&rdquo;.</p>

<p><img src="/assets/posts/AddModuleView.png" alt="AddModuleView.png" /></p>

<p>Initially, I will just show Dnn 7 compatible item templates, but eventually I&rsquo;d also like to add a seperate group for Dnn 8 item templates, which would include item templates for the new MVC and SPA stuff.</p>

<p>When you add the new item, not only do the source code files get added to your project, but any required dependencies also get brought in by the magical power of NuGet:</p>

<p><img src="/assets/posts/AddingDotNetNukeCoreNuget.PNG" alt="AddingDotNetNukeCoreNuget.PNG" /></p>

<p>So for example, adding a Module View for Dnn 7, will automatically bring in the DotNetNuke.Core NuGet package for Dnn7 as depicted above.</p>

<p>In other words, you don&rsquo;t need to worry about adding any Dnn assembly references for the most part, as they will be bought in for you as you add items to your project. Ofcourse, you are still free to add references to other dependencies you might have as normal.</p>

<h3>Running and Debugging</h3>

<p>When you want to run and debug your extension, for those of you that have read my previous blog about DnnPackager, you may recall that this could be accomplished via a command that you could enter in the Package Manager Console window and DnnPackager would handle the deployment and attaching the debugger.</p>

<p>Well that approach was only ever necessary because there was not any first class support within VS itself. Something I am going to rectify with the DotNetNuke project type.</p>

<p>In VS, I am going to extend the debugging toolbar (where the &ldquo;play&rdquo; button is)</p>

<p><img src="/assets/posts/debug%20toolbar.PNG" alt="debug toolbar.PNG" /></p>

<p>You can see in the screenshot there is an empty dropdown at present, but this will list your DotNetNuke websites that you have on your local IIS. The first one in that list will be selected by default.</p>

<p>You may also notice there a new Debugger selected in that screenshot called &ldquo;Local Dnn Website&rdquo;. That&rsquo;s my own custom debugger that&rsquo;s available only for this project type.</p>

<p>All you need to do is click &ldquo;Play&rdquo; and it will:</p>

<ol>
<li>Build your project to output the deployment zip.</li>
<li>Deploy your install zip to the Dnn website selected in the dropdown.</li>
<li>Attach the debugger to Dnn website&rsquo;s worker process that is selected in the dropwdown.</li>
<li>Launch a new browser window, navigated to that dnn websites home page.</li>
</ol>


<p>Therefore, to use a different Dnn website as the host for running and debugging your module, you would just select that website in the drop down instead, before you click the &ldquo;play&rdquo; button.</p>

<p>This is going to wayyyy better than previous workflows for Dnn development.</p>

<h2>What Now?</h2>

<p>Well.. I am pretty far into the development of this at the moment, which is why I have been able to include some screenshots. However it is a steep learning curve, and I am continuosly hitting hurdles with <a href="https://github.com/Microsoft/VSProjectSystem">Microsoft&rsquo;s new Project System (CPS)</a>. This is my first attempt at developing a VS project type and I don&rsquo;t have any in roads with microsoft or any support. So all of this means, I am &ldquo;hoping&rdquo; I can pull this off, and the signs are promising, but I&rsquo;m not through the woods yet. The (very) dark, mystical woods, of VS project type development.</p>

<p>Still, I&rsquo;d love to hear what others think of this - even though I appreciate it&rsquo;s very premature. Would you use such a system? Any ideas for improvements? I&rsquo;ll release a new blog post when things are looking a bit more finalised, and perhaps again when I have something for beta release.</p>

<p>Lastly, if there are any guru&rsquo;s out there who have expertise with <a href="https://github.com/Microsoft/VSProjectSystem">CPS</a> - I can always use a hand ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DnnPackager - Getting Started]]></title>
    <link href="http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/"/>
    <updated>2015-12-01T00:00:00+00:00</updated>
    <id>http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started</id>
    <content type="html"><![CDATA[<h2>Dnn Packager - Super Smooth Module Development</h2>

<p>In this post, I am going to show you how to get up and running with DnnPackager for your DotNetNuke module / extension development.</p>

<h2>Tools of the Trade</h2>

<p>I am using VS2015 Community Edition, but this should work equally well with previous versions.</p>

<!-- more -->


<h2>Installing DotNetNuke Locally</h2>

<p>You will need a local instance of DotNetNuke website installed so that you have somewhere to deploy / run and debug your modules. There are plenty of tutorials out there that cover how to install a Dnn website so I am not going to cover this here. If you think this would be useful, leave a comment below and I might consider it! Once you have a working Dnn Website installed under your local IIS - please read on!</p>

<h2>Create a Project</h2>

<p>Open Visual Studio, and Create a New &ldquo;ASP.NET Empty Web Application&rdquo; project. Make sure you select &ldquo;.NET 4&rdquo; from the drop down at the top.</p>

<p><img src="/assets/posts/NewAspNetProject.PNG" alt="New Project" /></p>

<p>Note: Create your project wherever you like - where you put your source code - that&rsquo;s your business!</p>

<h2>Tweak Web Project</h2>

<p>The reason we choose to create a web project in the previous step, rather than say - a library project, is just so that we have appropriate context menu options in visual studio for doing things like adding javascript and ascx files etc. This is generally handy for Dnn module development. However our project can not actually run as a &ldquo;standalone website&rdquo; - as we are developing a Dnn module - which can only run within the context of the Dnn website that is hosting it. The approach described in this blog should work equally well if you prefer to create other types of projects - but then you might not have those familiar menu options available, so you may have to add things like javascript files to your project by hand.</p>

<p>Select the project in Solution Explorer window, then in the properties window, change &ldquo;Always Start When Debugging&rdquo; to false.</p>

<p><img src="/assets/posts/alwaysstartwhendebuggingfalse.PNG" alt="alwaysstartwhendebuggingfalse.PNG" /></p>

<p>This will help later as it will prevent Visual Studio from needlessly trying to host your module project as its own website whenever you try and debug your module - which will be running in your local Dnn website instead.</p>

<h2>Add DnnPackager NuGet Package</h2>

<p>Open the Package Manager Console (Tools &ndash;> NuGet Package Manager) and (With your project selected in the &ldquo;Default Project&rdquo; dropdown, type into it the following command and hit enter to install the DnnPackager NuGet package:</p>

<pre><code>
Install-Package DnnPackager
</code></pre>

<p><img src="/assets/posts/NuGetConsoleAddDnnPackagerNuGet.PNG" alt="NuGetConsoleAddDnnPackagerNuGet.PNG" /></p>

<p>This will add some new items to your project, and to your solution. I will cover what these are for later.</p>

<p><img src="/assets/posts/ProjectAfterAddingDnnPackager.PNG" alt="ProjectAfterAddingDnnPackager.PNG" /></p>

<h2>Dnn Sdk Assemblies</h2>

<p>In order to proceed with Dnn development, we will actually need to add references to the Dnn assemblies. Depending on the version of DotNetNuke you want your extension to be compatible with will often determine what version of the Dnn assemblies you will need to reference.</p>

<p>For the sake of this blog post I am going to assume that you are going to target the latest version of Dnn (at the time of writing this is Dnn 7)</p>

<p>Using the Package Manager Console again:</p>

<pre><code>
Install-Package DotNetNuke.Core
</code></pre>

<p>This should add a reference to the DotNetNuke assembly to your project&rsquo;s references:</p>

<p><img src="/assets/posts/ReferencesAfterAddingDnnCore.PNG" alt="ReferencesAfterAddingDnnCore.PNG" /></p>

<h2>Let&rsquo;s Develop a Module!</h2>

<p>Now we have got most of the setup out of the way, it&rsquo;s time to get cracking on our module!</p>

<p>First add a new User Control to the project. This is going to be the default UI for our super cool DNN module.</p>

<p><img src="/assets/posts/AddUserControl.PNG" alt="AddUserControl.PNG" /></p>

<p>We then need to change our new User Control to make it inherit from <code>PortalModuleBase</code> rather than <code>System.Web.UI.UserControl</code>.</p>

<p>So change this:</p>

<pre><code class="csharp">
namespace MySuperModule
{
    public partial class Default : System.Web.UI.UserControl
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}
</code></pre>

<p>To this:</p>

<pre><code class="csharp">using DotNetNuke.Entities.Modules;

namespace MySuperModule
{
    public partial class Default : PortalModuleBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}
</code></pre>

<p><strong> Don&rsquo;t forget to add the &lsquo;using&rsquo; statement depicted above! </strong></p>

<h2>Making an awesome module</h2>

<p>Further development of this super awesome module is beyond the scope of this post, so I am just going to make it display something really simple for the time being. There are <a href="http://www.dnnsoftware.com/community-blog/cid/141749/dotnetnuke-module-development-101-5--hello-world-3-using-visual-studio-to-create-a-module">plenty of other resources</a> out there for learning about Dnn module development. For now let&rsquo;s  make it display some text.</p>

<p>Add the following h1 content to your markup for the user control:</p>

<p>&#8220;` html</p>

<p>&lt;%@ Control Language=&ldquo;C#&rdquo; AutoEventWireup=&ldquo;true&rdquo; CodeBehind=&ldquo;Default.ascx.cs&rdquo; Inherits=&ldquo;MySuperModule.Default&rdquo; %></p>

<h1>I came, I read a blog, I conquered!</h1>


<pre><code>
## Module Manifest
Now that we have this incredible... work of art, naturally we want to run it and test it out. In order to do this though, we first need to make sure our module is going to identify itself with DotNetNuke correctly. This means it should have a manifest.

One of the files that was automatically added to your project when you added the DnnPackager NuGet package was: manifest.dnn

Open up manifest.dnn and replace the values in square brackets with appropriate values. You only need to do this once.

For example, you will see something that looks like this:
</code></pre>

<p><dotnetnuke type="Package" version="6.0">
  <packages>  <br/>
    <package name="[YourPackageName]" type="Module" version="0.0.0">
      <friendlyName>[FriendlyPackageName]</friendlyName>
      <description></description>
      <owner>
        <name>[OwnerName]</name>
        <organization>[OrganizationName]</organization>
        <url><a href="http://www.someurl.com">http://www.someurl.com</a></url>
        <email>&lt;![CDATA[<a href="mailto:support@someorg.com"><a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#115;&#x75;&#112;&#x70;&#x6f;&#114;&#116;&#64;&#x73;&#x6f;&#x6d;&#x65;&#x6f;&#x72;&#103;&#46;&#x63;&#x6f;&#x6d;">&#x73;&#117;&#112;&#x70;&#111;&#114;&#x74;&#x40;&#115;&#111;&#x6d;&#x65;&#x6f;&#114;&#x67;&#x2e;&#99;&#x6f;&#109;</a></a>]]&gt;</email>
      </owner>
      <license src="License.lic">
      </license>
      <releaseNotes src="ReleaseNotes.txt">
      </releaseNotes>
      <dependencies>    <br/>
      </dependencies>
      <components>
        <component type="Module">
          <desktopModule>
            <moduleName>[YourModuleName]</moduleName>
            <foldername>[FolderName]</foldername>
            <businessControllerClass />
            <supportedFeatures />
            <moduleDefinitions>
              <moduleDefinition>
                <friendlyName>[Friendly Module Name]</friendlyName>
                <defaultCacheTime>60</defaultCacheTime>
                <moduleControls>
                  <moduleControl>
                    <controlKey>
                    </controlKey>
                    <controlSrc>[YourControllerOrPathToView]/[YourViewFileName].[YourViewFileExtension]</controlSrc>
                    <supportsPartialRendering>False</supportsPartialRendering>
                    <controlTitle>[Default title when added to page]</controlTitle>
                    <controlType>View</controlType>
                    <helpUrl>
                    </helpUrl>
                  </moduleControl>
                  <moduleControl>
                    <controlKey>settings</controlKey>
                    <controlSrc>[YourControllerOrPathToSettings]/[YourSettingsFileName].[YourSettingsFileExtension]</controlSrc>
                    <supportsPartialRendering>False</supportsPartialRendering>
                    <controlTitle>[Default settings title]</controlTitle>
                    <controlType>View</controlType>
                    <helpUrl>
                    </helpUrl>
                  </moduleControl>
                </moduleControls>
                <permissions>
                </permissions>
              </moduleDefinition>
            </moduleDefinitions>
          </desktopModule>
        </component>
        <component type="Assembly">
          <assemblies>
            <assembly>
              <path>bin</path>
              <name>[YourAssembly.dll]</name>
            </assembly>
          </assemblies>
        </component>
        <component type="ResourceFile">
          <resourceFiles>
            <basePath>DesktopModules/[FolderName]</basePath>
            <resourceFile>
              <name>Resources.zip</name>
            </resourceFile>
          </resourceFiles>
        </component>
      </components>
    </package> <br/>
  </packages>
</dotnetnuke></p>

<pre><code>
Fill it in so it looks more like this:
</code></pre>

<p><dotnetnuke type="Package" version="6.0">
  <packages>  <br/>
    <package name="MySuperModule" type="Module" version="0.0.1">
      <friendlyName>MySuperModule</friendlyName>
      <description>Makes the internet work</description>
      <owner>
        <name>Darrell Tunnell</name>
        <organization>Dazinator</organization>
        <url><a href="http://darrelltunnell.net">http://darrelltunnell.net</a></url>
        <email>&lt;![CDATA[<a href="mailto:support@someorg.com"><a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#115;&#x75;&#112;&#x70;&#x6f;&#114;&#x74;&#64;&#x73;&#x6f;&#109;&#x65;&#x6f;&#114;&#x67;&#46;&#99;&#111;&#x6d;">&#115;&#117;&#x70;&#x70;&#111;&#114;&#x74;&#64;&#x73;&#111;&#109;&#x65;&#x6f;&#114;&#103;&#x2e;&#99;&#111;&#x6d;</a></a>]]&gt;</email>
      </owner>
      <license src="License.lic">
      </license>
      <releaseNotes src="ReleaseNotes.txt">
      </releaseNotes>
      <dependencies>    <br/>
      </dependencies>
      <components>
        <component type="Module">
          <desktopModule>
            <moduleName>MySuperModule</moduleName>
            <foldername>MySuperModule</foldername>
            <businessControllerClass />
            <supportedFeatures />
            <moduleDefinitions>
              <moduleDefinition>
                <friendlyName>MySuperModule</friendlyName>
                <defaultCacheTime>-1</defaultCacheTime>
                <moduleControls>
                  <moduleControl>
                    <controlKey>
                    </controlKey>
                    <controlSrc>DesktopModules/MySuperModule/Default.ascx</controlSrc>
                    <supportsPartialRendering>False</supportsPartialRendering>
                    <controlTitle>Hello</controlTitle>
                    <controlType>View</controlType>
                    <helpUrl>
                    </helpUrl>
                  </moduleControl>               <br/>
                </moduleControls>
                <permissions>
                </permissions>
              </moduleDefinition>
            </moduleDefinitions>
          </desktopModule>
        </component>
        <component type="Assembly">
          <assemblies>
            <assembly>
              <path>bin</path>
              <name>MySuperModule.dll</name>
            </assembly>
          </assemblies>
        </component>
        <component type="ResourceFile">
          <resourceFiles>
            <basePath>DesktopModules/MySuperModule</basePath>
            <resourceFile>
              <name>Resources.zip</name>
            </resourceFile>
          </resourceFiles>
        </component>
      </components>
    </package> <br/>
  </packages>
</dotnetnuke></p>

<pre><code>
Note: I removed the entry for the "settings" for our module as we don't have a settings screen in this example. I also changed the default cache time to -1, which disables caching.. just because I have a feeling this module is going to one day become a lot more dynamic and I don't want outdated content causing confusion :-)

Important: I also set the version number to 0.0.1. Version numbers are important in that Dnn will not let you install an older version of a module over the top of a newer version. The version number in the manifest would have to be equal to, or greater than the currently installed version for it to install over the top.

## Ready to roll

Sense that tension in the air? The excitement is building.. The entire blog post has been leading to this one, perfect, moment.

We are now going to deploy our module to our local Dnn website, and debug it.

## Automating Deployment

In VS, go to the "Package Manager Console" window, and make sure your project is selected from the projects dropdown.

1. Type: `Install-Module [name of your website in IIS]` and hit enter.
2. Watch as your module project is built, packaged up as a zip, and then the zip is deployed to your local Dnn website!

For example, on my IIS, the name of my Dnn website is "DotNetNuke"

![IISDnnWebsite.PNG](/assets/posts/IISDnnWebsite.PNG)

So I type into the Package Manager Console `Install-Module DotNetNuke` and hit enter.

After that completes, you can Login to your DotNetNuke website as host, and go to the Host--&gt;Extensions page, and you should see that your module is now listed as an installed extension! Pretty cool!

![hostextensionsmodules.PNG](/assets/posts/hostextensionsmodules.PNG)

## Setting up a Page to Host it

Although our module has been installed onto our site, it won't display anywhere - because we need to tell DotNetNuke where it should be displayed!

This is a quick one time task, of simply creating a page in DotNetNuke to display our module.

1. Login as Host
2. Pages --&gt; Add New Page
3. Fill out page details and create it.
4. Modules --&gt; Add New Module
5. Add your new module on to the page.

You should see:

![AddedModule.PNG](/assets/posts/AddedModule.PNG)

## Debugging it &amp; Testing Changes

Let's make some changes. Add some more content:
</code></pre>

<h1>I came, I read a blog, I conquered!</h1>


<p>Everyday I&#8217;m shuffling!</p>


<pre><code>
Add some code in your code behind, and set a breakpoint on it:

![codebehindbreakpoint.PNG](/assets/posts/codebehindbreakpoint.PNG)

Now deploy this very simply by placing your cursor in the Package Manager Console window, and hitting "up" arrow on your keyboard. This will bring up the last command:
</code></pre>

<p>Install-Module DotNetNuke</p>

<pre><code>
hit enter.

Once that completes, refresh the page displaying your module:

![redeployedmodulewithchanges.PNG](/assets/posts/redeployedmodulewithchanges.PNG)

Simples!

## But wait - my breakpoint wasn't hit!

That's because your module is being executed within the process running your DotNetNuke website. So what you need to do is "attach" the debugger to that process.

You can do this manually, or you can let DnnPackager do it for you. To let DnnPackager handle this, go back to the package manager console, and amend that command you are using, by adding on a couple of arguments:
</code></pre>

<p>Install-Module DotNetNuke Debug Attach</p>

<p>&#8220;`</p>

<p>So do that, and hit enter. You should see it deploy your module as before but this time it will also attach your debugger!</p>

<p>So.. refresh your page.. and BAM! Breakpoint is hit!</p>

<p><img src="/assets/posts/breakpointhit.PNG" alt="breakpointhit.PNG" /></p>

<p><strong>You need to be running Visual Studio as an Administrator before you can attach to the w3p process.</strong></p>

<p>The full syntax of the command is (values in braces are optional):</p>

<p><code>Install-Module [name of your website in IIS] {Build Configuration} {Attach}</code></p>

<p>However, if for some strange reason you&rsquo;d prefer to attach to process in some other way, you absolutely can do that - no one is &ldquo;forcing&rdquo; you to use the above command. There are VS extensions you can get to make attaching to IIS processes trivial. Otherwise, within VS, a quick way to do it is do this:</p>

<ol>
<li>Hit ctrl + alt + p</li>
<li>Tick show all processes (if it&rsquo;s not allready)</li>
<li>Select any process in the list, then hit &ldquo;w&rdquo; on your keyboard - this should scroll you to the &ldquo;w3wp.exe&rdquo; process.</li>
<li>Click &ldquo;attach&rdquo;.</li>
</ol>


<p><img src="/assets/posts/attachtoprocess.PNG" alt="attachtoprocess.PNG" /></p>

<h2>What about if I just want my Zip file</h2>

<p>If you just want your installation zip for some reason, perhaps you want to upload it to the Dnn store etc, just build your project as normal and check in your projects output directory.</p>

<h2>Issues?</h2>

<p>DnnPackager is open source on GitHub. Feel free to <a href="https://github.com/dazinator/DnnPackager">raise an issue</a></p>

<h2>In Summary</h2>

<p>DnnPackager is an automation tool that I built to help streamline the Dnn module develop workflow. Feel free to drop me a comment - does this tool help? Or have I missed my mark? Where could it be better? I&rsquo;d love to hear suggestions.</p>
]]></content>
  </entry>
  
</feed>
